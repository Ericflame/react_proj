{"ast":null,"code":"import\"antd/es/message/style\";import _message from\"antd/es/message\";// 可以发送异步ajax请求的函数模块 封装ajax库\n// 函数的返回值是一个promise对象\n/* \r\n  1、优化1：统一处理请求异常\r\n      在外层包一个自己创建的promise对象\r\n      在请求出错时 不执行reject(error) 而是显示错误提示\r\n  \r\n  2、优化2：异步得到不是reponse 而是response.data\r\n      在请求成功resolve时：resolve(response.data)\r\n*/import axios from'axios';import qs from'querystring';import NProgress from'nprogress';import store from'../redux/store';import{createDeleteUserInfoAction}from'../redux/actions_creators/login_action';import'nprogress/nprogress.css';var instance=axios.create({timeout:4000});//请求拦截器\n// Add a request interceptor\ninstance.interceptors.request.use(function(config){//进度条开始\nNProgress.start();// 从配置对象中获取method和data\nvar method=config.method,data=config.data;if(method.toLowerCase()==='post'){if(data instanceof Object){config.data=qs.stringify(data);}}return config;});//响应拦截器\n// Add a response interceptor\ninstance.interceptors.response.use(function(response){//进度条结束\nNProgress.done();//请求若成功\nreturn response.data;},//请求若失败\nfunction(error){NProgress.done();if(error.response.status===401){_message.error('身份校验失败，请重新登录',1);// this.props.deleteUserInfo()\n//分发一个删除用户信息的action\nstore.dispatch(createDeleteUserInfoAction());}else{_message.error(error.message,1);}//请求若失败，提示错误（这里可以处理所有请求的异常）\n_message.error(error.message,1);//中断Promise链\nreturn new Promise(function(){});});export default instance;","map":{"version":3,"sources":["C:/Users/PC/Desktop/源码/react_Project/react-project/src/api/myAxios.js"],"names":["axios","qs","NProgress","store","createDeleteUserInfoAction","instance","create","timeout","interceptors","request","use","config","start","method","data","toLowerCase","Object","stringify","response","done","error","status","dispatch","message","Promise"],"mappings":"oEAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,EAAP,KAAe,aAAf,CAEA,MAAOC,CAAAA,SAAP,KAAsB,WAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CACA,OAAQC,0BAAR,KAAyC,wCAAzC,CACA,MAAO,yBAAP,CAEA,GAAMC,CAAAA,QAAQ,CAAGL,KAAK,CAACM,MAAN,CAAa,CAC5BC,OAAO,CAAC,IADoB,CAAb,CAAjB,CAKA;AACA;AACAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,SAACC,MAAD,CAAY,CAC5C;AACAT,SAAS,CAACU,KAAV,GACA;AAH4C,GAIrCC,CAAAA,MAJqC,CAItBF,MAJsB,CAIrCE,MAJqC,CAI9BC,IAJ8B,CAItBH,MAJsB,CAI9BG,IAJ8B,CAK5C,GAAGD,MAAM,CAACE,WAAP,KAAyB,MAA5B,CAAmC,CACjC,GAAGD,IAAI,WAAYE,CAAAA,MAAnB,CAA0B,CACxBL,MAAM,CAACG,IAAP,CAAcb,EAAE,CAACgB,SAAH,CAAaH,IAAb,CAAd,CACD,CACF,CACD,MAAOH,CAAAA,MAAP,CAED,CAZD,EAcA;AACA;AACAN,QAAQ,CAACG,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CACE,SAACQ,QAAD,CAAc,CACZ;AACAhB,SAAS,CAACiB,IAAV,GACA;AACF,MAAOD,CAAAA,QAAQ,CAACJ,IAAhB,CACD,CAND,CAQI;AACF,SAACM,KAAD,CAAS,CACPlB,SAAS,CAACiB,IAAV,GACA,GAAGC,KAAK,CAACF,QAAN,CAAeG,MAAf,GAA0B,GAA7B,CAAiC,CAC/B,SAAQD,KAAR,CAAc,cAAd,CAA6B,CAA7B,EACA;AACA;AACAjB,KAAK,CAACmB,QAAN,CAAelB,0BAA0B,EAAzC,EACD,CALD,IAKK,CACH,SAAQgB,KAAR,CAAcA,KAAK,CAACG,OAApB,CAA4B,CAA5B,EACD,CACH;AACA,SAAQH,KAAR,CAAcA,KAAK,CAACG,OAApB,CAA4B,CAA5B,EACA;AACA,MAAO,IAAIC,CAAAA,OAAJ,CAAY,UAAI,CAAE,CAAlB,CAAP,CACD,CAvBD,EAyBA,cAAenB,CAAAA,QAAf","sourcesContent":["// 可以发送异步ajax请求的函数模块 封装ajax库\r\n// 函数的返回值是一个promise对象\r\n\r\n/* \r\n  1、优化1：统一处理请求异常\r\n      在外层包一个自己创建的promise对象\r\n      在请求出错时 不执行reject(error) 而是显示错误提示\r\n  \r\n  2、优化2：异步得到不是reponse 而是response.data\r\n      在请求成功resolve时：resolve(response.data)\r\n*/\r\n\r\nimport axios from 'axios'\r\nimport qs from 'querystring'\r\nimport {message} from 'antd' \r\nimport NProgress from 'nprogress'\r\nimport store from '../redux/store'\r\nimport {createDeleteUserInfoAction} from '../redux/actions_creators/login_action'\r\nimport 'nprogress/nprogress.css'\r\n\r\nconst instance = axios.create({\r\n  timeout:4000\r\n})\r\n\r\n\r\n//请求拦截器\r\n// Add a request interceptor\r\ninstance.interceptors.request.use((config) => {\r\n  //进度条开始\r\n  NProgress.start()\r\n  // 从配置对象中获取method和data\r\n  const {method,data} = config\r\n  if(method.toLowerCase() === 'post'){\r\n    if(data instanceof Object){\r\n      config.data = qs.stringify(data)\r\n    }\r\n  }\r\n  return config\r\n  \r\n});\r\n\r\n//响应拦截器\r\n// Add a response interceptor\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    //进度条结束\r\n    NProgress.done()\r\n    //请求若成功\r\n  return response.data;\r\n}, \r\n\r\n    //请求若失败\r\n  (error)=>{\r\n    NProgress.done()\r\n    if(error.response.status === 401){\r\n      message.error('身份校验失败，请重新登录',1)\r\n      // this.props.deleteUserInfo()\r\n      //分发一个删除用户信息的action\r\n      store.dispatch(createDeleteUserInfoAction())\r\n    }else{\r\n      message.error(error.message,1)\r\n    }\r\n  //请求若失败，提示错误（这里可以处理所有请求的异常）\r\n  message.error(error.message,1)\r\n  //中断Promise链\r\n  return new Promise(()=>{})\r\n});\r\n\r\nexport default instance\r\n\r\n"]},"metadata":{},"sourceType":"module"}