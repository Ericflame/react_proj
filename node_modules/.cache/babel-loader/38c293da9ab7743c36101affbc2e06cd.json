{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\react-project\\\\src\\\\containers\\\\Product\\\\rich-text-editor.jsx\";\nimport React, { Component } from 'react'; // import PropTypes from 'prop-types'\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { ContentState, convertToRaw, EditorState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs'; // 用来指定商品详情的富文本编程器组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class RichTextEditor extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // 创建一个没有内容的编辑对象\n      editorState: EditorState.createEmpty() //构建一个初始化状态的编辑器+内容\n\n    };\n\n    this.onEditorStateChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n\n    this.getRichText = () => {\n      // 返回输入数据对应的html格式的文本\n      return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\n    };\n  }\n\n  /* \r\n    uploadImageCallback = (file) => {\r\n      return new Promise(\r\n        (resolve, reject) => {\r\n          const xhr = new XMLHttpRequest()\r\n          xhr.open('POST', '/manage/img/upload')\r\n          const data = new FormData()\r\n          data.append('image', file)\r\n          xhr.send(data)\r\n          xhr.addEventListener('load', () => {\r\n            const response = JSON.parse(xhr.responseText)\r\n            const url = response.data.url  //得到图片的url\r\n            resolve({ data: { link: url } })\r\n          })\r\n          xhr.addEventListener('load', () => {\r\n            const error = JSON.parse(xhr.responseText)\r\n            reject(error)\r\n          })\r\n        }\r\n      )\r\n    } */\n  render() {\n    const {\n      editorState\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      editorStyle: {\n        border: '1px solid #ddd',\n        minHeight: 200,\n        paddingLeft: 10\n      },\n      onEditorStateChange: this.onEditorStateChange,\n      toolbar: {\n        image: {\n          uploadCallback: this.uploadImageCallback,\n          alt: {\n            present: true,\n            mandatory: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/src/containers/Product/rich-text-editor.jsx"],"names":["React","Component","Editor","ContentState","convertToRaw","EditorState","draftToHtml","htmlToDraft","RichTextEditor","state","editorState","createEmpty","onEditorStateChange","setState","getRichText","getCurrentContent","render","border","minHeight","paddingLeft","image","uploadCallback","uploadImageCallback","alt","present","mandatory"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,WAArC,QAAwD,UAAxD;AACA,OAAO,kDAAP;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,iBAAxB,C,CAEA;;;AACA,eAAe,MAAMC,cAAN,SAA6BP,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAKpDQ,KALoD,GAK5C;AACN;AACAC,MAAAA,WAAW,EAAEL,WAAW,CAACM,WAAZ,EAFP,CAEgC;;AAFhC,KAL4C;;AAAA,SAgCpDC,mBAhCoD,GAgC7BF,WAAD,IAAiB;AACrC,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KAlCmD;;AAAA,SAoCpDI,WApCoD,GAoCtC,MAAM;AAElB;AACA,aAAOR,WAAW,CAACF,YAAY,CAAC,KAAKK,KAAL,CAAWC,WAAX,CAAuBK,iBAAvB,EAAD,CAAb,CAAlB;AACD,KAxCmD;AAAA;;AAyCpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEEC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEN,MAAAA;AAAF,QAAkB,KAAKD,KAA7B;AACA,wBACE,QAAC,MAAD;AACE,MAAA,WAAW,EAAEC,WADf;AAEE,MAAA,WAAW,EAAE;AAAEO,QAAAA,MAAM,EAAE,gBAAV;AAA4BC,QAAAA,SAAS,EAAE,GAAvC;AAA4CC,QAAAA,WAAW,EAAE;AAAzD,OAFf;AAGE,MAAA,mBAAmB,EAAE,KAAKP,mBAH5B;AAIE,MAAA,OAAO,EAAE;AACPQ,QAAAA,KAAK,EAAE;AAAEC,UAAAA,cAAc,EAAE,KAAKC,mBAAvB;AAA4CC,UAAAA,GAAG,EAAE;AAAEC,YAAAA,OAAO,EAAE,IAAX;AAAiBC,YAAAA,SAAS,EAAE;AAA5B;AAAjD;AADA;AAJX;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AA5EmD","sourcesContent":["import React, { Component } from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport { ContentState, convertToRaw, EditorState } from 'draft-js'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\n\r\n// 用来指定商品详情的富文本编程器组件\r\nexport default class RichTextEditor extends Component {\r\n\r\n  /* static propTypes = {\r\n    detail: PropTypes.string\r\n  } */\r\n  state = {\r\n    // 创建一个没有内容的编辑对象\r\n    editorState: EditorState.createEmpty()//构建一个初始化状态的编辑器+内容\r\n  }\r\n\r\n  /*   constructor(props) {\r\n      super(props)\r\n      const html = this.props.detail\r\n      if (html) {  //如果有值创建包含内容的html对象\r\n        const contentBlock = htmlToDraft(html)\r\n        if (contentBlock) {\r\n          const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\r\n          const editorState = EditorState.createWithContent(contentState)\r\n          this.state = {\r\n            editorState,\r\n          }\r\n        }\r\n      } else {\r\n        this.state = {\r\n          editorState: EditorState.createEmpty()\r\n        }\r\n      }\r\n    } */\r\n\r\n\r\n\r\n  // 输入过程中实时的回调\r\n  onEditorStateChange = (editorState) => {\r\n    this.setState({ editorState })\r\n  }\r\n\r\n  getRichText = () => {\r\n    \r\n    // 返回输入数据对应的html格式的文本\r\n    return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\r\n  }\r\n  /* \r\n    uploadImageCallback = (file) => {\r\n      return new Promise(\r\n        (resolve, reject) => {\r\n          const xhr = new XMLHttpRequest()\r\n          xhr.open('POST', '/manage/img/upload')\r\n          const data = new FormData()\r\n          data.append('image', file)\r\n          xhr.send(data)\r\n          xhr.addEventListener('load', () => {\r\n            const response = JSON.parse(xhr.responseText)\r\n            const url = response.data.url  //得到图片的url\r\n            resolve({ data: { link: url } })\r\n          })\r\n          xhr.addEventListener('load', () => {\r\n            const error = JSON.parse(xhr.responseText)\r\n            reject(error)\r\n          })\r\n        }\r\n      )\r\n    } */\r\n\r\n  render() {\r\n    const { editorState } = this.state\r\n    return (\r\n      <Editor\r\n        editorState={editorState}\r\n        editorStyle={{ border: '1px solid #ddd', minHeight: 200, paddingLeft: 10 }}\r\n        onEditorStateChange={this.onEditorStateChange}\r\n        toolbar={{\r\n          image: { uploadCallback: this.uploadImageCallback, alt: { present: true, mandatory: true } }\r\n        }}\r\n      />\r\n\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}