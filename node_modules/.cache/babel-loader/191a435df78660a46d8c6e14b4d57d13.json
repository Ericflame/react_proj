{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\react-project\\\\src\\\\containers\\\\Product\\\\rich-text-editor.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { ContentState, convertToRaw, EditorState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs'; // 用来指定商品详情的富文本编程器组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class RichTextEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // 创建一个没有内容的编辑对象\n      editorState: EditorState.createEmpty()\n    };\n\n    this.onEditorStateChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n\n    this.getDetail = () => {\n      // 返回输入数据对应的html格式的文本\n      return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\n    };\n\n    this.uploadImageCallback = file => {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', '/manage/img/upload');\n        const data = new FormData();\n        data.append('image', file);\n        xhr.send(data);\n        xhr.addEventListener('load', () => {\n          const response = JSON.parse(xhr.responseText);\n          const url = response.data.url; //得到图片的url\n\n          resolve({\n            data: {\n              link: url\n            }\n          });\n        });\n        xhr.addEventListener('load', () => {\n          const error = JSON.parse(xhr.responseText);\n          reject(error);\n        });\n      });\n    };\n\n    const html = this.props.detail;\n\n    if (html) {\n      //如果有值创建包含内容的html对象\n      const contentBlock = htmlToDraft(html);\n\n      if (contentBlock) {\n        const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n        const editorState = EditorState.createWithContent(contentState);\n        this.state = {\n          editorState\n        };\n      }\n    } else {\n      this.state = {\n        editorState: EditorState.createEmpty()\n      };\n    }\n  } // 输入过程中实时的回调\n\n\n  render() {\n    const {\n      editorState\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      editorStyle: {\n        border: '1px solid #ddd',\n        minHeight: 200,\n        paddingLeft: 10\n      },\n      onEditorStateChange: this.onEditorStateChange,\n      toolbar: {\n        image: {\n          uploadCallback: this.uploadImageCallback,\n          alt: {\n            present: true,\n            mandatory: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }, this);\n  }\n\n}\nRichTextEditor.propTypes = {\n  detail: PropTypes.string\n};","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/src/containers/Product/rich-text-editor.jsx"],"names":["React","Component","PropTypes","Editor","ContentState","convertToRaw","EditorState","draftToHtml","htmlToDraft","RichTextEditor","constructor","props","state","editorState","createEmpty","onEditorStateChange","setState","getDetail","getCurrentContent","uploadImageCallback","file","Promise","resolve","reject","xhr","XMLHttpRequest","open","data","FormData","append","send","addEventListener","response","JSON","parse","responseText","url","link","error","html","detail","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","render","border","minHeight","paddingLeft","image","uploadCallback","alt","present","mandatory","propTypes","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport {ContentState, convertToRaw, EditorState} from 'draft-js'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\n\r\n// 用来指定商品详情的富文本编程器组件\r\nexport default class RichTextEditor extends Component {\r\n\r\n  static propTypes = {\r\n    detail: PropTypes.string\r\n  }\r\n    state = {\r\n      // 创建一个没有内容的编辑对象\r\n      editorState: EditorState.createEmpty()\r\n    }\r\n\r\n    constructor(props) {\r\n      super(props)\r\n      const html = this.props.detail\r\n      if (html) {  //如果有值创建包含内容的html对象\r\n        const contentBlock = htmlToDraft(html)\r\n        if (contentBlock) {\r\n            const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\r\n            const editorState = EditorState.createWithContent(contentState)\r\n            this.state = {\r\n              editorState,\r\n            }\r\n          }\r\n        } else {\r\n          this.state = {\r\n          editorState: EditorState.createEmpty()\r\n        }\r\n      } \r\n    }\r\n      \r\n\r\n\r\n    // 输入过程中实时的回调\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({editorState})\r\n    }\r\n\r\n    getDetail = () => {\r\n      // 返回输入数据对应的html格式的文本\r\n      return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\r\n    }\r\n\r\n    uploadImageCallback = (file) => {\r\n      return new Promise(\r\n        (resolve,reject) => {\r\n          const xhr = new XMLHttpRequest()\r\n          xhr.open('POST','/manage/img/upload')\r\n          const data = new FormData()\r\n          data.append('image',file)\r\n          xhr.send(data)\r\n          xhr.addEventListener('load',()=>{\r\n            const response = JSON.parse(xhr.responseText)\r\n            const url = response.data.url  //得到图片的url\r\n            resolve({data:{link:url}})\r\n          })\r\n          xhr.addEventListener('load',()=>{\r\n            const error = JSON.parse(xhr.responseText)\r\n            reject(error)\r\n          })\r\n        }\r\n      )\r\n    }\r\n\r\n    render() {\r\n        const {editorState} = this.state\r\n        return (\r\n              <Editor\r\n                editorState={editorState}\r\n                editorStyle={{border: '1px solid #ddd', minHeight: 200, paddingLeft: 10}}\r\n                onEditorStateChange={this.onEditorStateChange}\r\n                toolbar={{\r\n                  image: {uploadCallback: this.uploadImageCallback,alt: {present: true, mandatory: true}}\r\n                }}\r\n              />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}