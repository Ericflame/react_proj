{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\n/**\n * Caution: If the mechanism should be changed some day, these cases\n * should be considered:\n *\n * (1) In `merge option` mode, if using the same option to call `setOption`\n * many times, the result should be the same (try our best to ensure that).\n * (2) In `merge option` mode, if a component has no id/name specified, it\n * will be merged by index, and the result sequence of the components is\n * consistent to the original sequence.\n * (3) In `replaceMerge` mode, keep the result sequence of the components is\n * consistent to the original sequence, even though there might result in \"hole\".\n * (4) `reset` feature (in toolbox). Find detailed info in comments about\n * `mergeOption` in module:echarts/model/OptionManager.\n */\n\nimport { each, filter, isArray, isObject, isString, createHashMap, assert, clone, merge, extend, mixin, isFunction } from 'zrender/lib/core/util';\nimport * as modelUtil from '../util/model';\nimport Model from './Model';\nimport ComponentModel from './Component';\nimport globalDefault from './globalDefault';\nimport { resetSourceDefaulter } from '../data/helper/sourceHelper';\nimport { concatInternalOptions } from './internalComponentCreator';\nimport { PaletteMixin } from './mixin/palette';\nimport { error } from '../util/log'; // -----------------------\n// Internal method names:\n// -----------------------\n\nvar reCreateSeriesIndices;\nvar assertSeriesInitialized;\nvar initBase;\nvar OPTION_INNER_KEY = '\\0_ec_inner';\nvar OPTION_INNER_VALUE = 1;\nvar BUITIN_COMPONENTS_MAP = {\n  grid: 'GridComponent',\n  polar: 'PolarComponent',\n  geo: 'GeoComponent',\n  singleAxis: 'SingleAxisComponent',\n  parallel: 'ParallelComponent',\n  calendar: 'CalendarComponent',\n  graphic: 'GraphicComponent',\n  toolbox: 'ToolboxComponent',\n  tooltip: 'TooltipComponent',\n  axisPointer: 'AxisPointerComponent',\n  brush: 'BrushComponent',\n  title: 'TitleComponent',\n  timeline: 'TimelineComponent',\n  markPoint: 'MarkPointComponent',\n  markLine: 'MarkLineComponent',\n  markArea: 'MarkAreaComponent',\n  legend: 'LegendComponent',\n  dataZoom: 'DataZoomComponent',\n  visualMap: 'VisualMapComponent',\n  // aria: 'AriaComponent',\n  // dataset: 'DatasetComponent',\n  // Dependencies\n  xAxis: 'GridComponent',\n  yAxis: 'GridComponent',\n  angleAxis: 'PolarComponent',\n  radiusAxis: 'PolarComponent'\n};\nvar BUILTIN_CHARTS_MAP = {\n  line: 'LineChart',\n  bar: 'BarChart',\n  pie: 'PieChart',\n  scatter: 'ScatterChart',\n  radar: 'RadarChart',\n  map: 'MapChart',\n  tree: 'TreeChart',\n  treemap: 'TreemapChart',\n  graph: 'GraphChart',\n  gauge: 'GaugeChart',\n  funnel: 'FunnelChart',\n  parallel: 'ParallelChart',\n  sankey: 'SankeyChart',\n  boxplot: 'BoxplotChart',\n  candlestick: 'CandlestickChart',\n  effectScatter: 'EffectScatterChart',\n  lines: 'LinesChart',\n  heatmap: 'HeatmapChart',\n  pictorialBar: 'PictorialBarChart',\n  themeRiver: 'ThemeRiverChart',\n  sunburst: 'SunburstChart',\n  custom: 'CustomChart'\n};\nvar componetsMissingLogPrinted = {};\n\nvar GlobalModel =\n/** @class */\nfunction (_super) {\n  __extends(GlobalModel, _super);\n\n  function GlobalModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GlobalModel.prototype.init = function (option, parentModel, ecModel, theme, locale, optionManager) {\n    theme = theme || {};\n    this.option = null; // Mark as not initialized.\n\n    this._theme = new Model(theme);\n    this._locale = new Model(locale);\n    this._optionManager = optionManager;\n  };\n\n  GlobalModel.prototype.setOption = function (option, opts, optionPreprocessorFuncs) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(option != null, 'option is null/undefined');\n      assert(option[OPTION_INNER_KEY] !== OPTION_INNER_VALUE, 'please use chart.getOption()');\n    }\n\n    var innerOpt = normalizeSetOptionInput(opts);\n\n    this._optionManager.setOption(option, optionPreprocessorFuncs, innerOpt);\n\n    this._resetOption(null, innerOpt);\n  };\n  /**\n   * @param type null/undefined: reset all.\n   *        'recreate': force recreate all.\n   *        'timeline': only reset timeline option\n   *        'media': only reset media query option\n   * @return Whether option changed.\n   */\n\n\n  GlobalModel.prototype.resetOption = function (type, opt) {\n    return this._resetOption(type, normalizeSetOptionInput(opt));\n  };\n\n  GlobalModel.prototype._resetOption = function (type, opt) {\n    var optionChanged = false;\n    var optionManager = this._optionManager;\n\n    if (!type || type === 'recreate') {\n      var baseOption = optionManager.mountOption(type === 'recreate');\n\n      if (!this.option || type === 'recreate') {\n        initBase(this, baseOption);\n      } else {\n        this.restoreData();\n\n        this._mergeOption(baseOption, opt);\n      }\n\n      optionChanged = true;\n    }\n\n    if (type === 'timeline' || type === 'media') {\n      this.restoreData();\n    } // By design, if `setOption(option2)` at the second time, and `option2` is a `ECUnitOption`,\n    // it should better not have the same props with `MediaUnit['option']`.\n    // Becuase either `option2` or `MediaUnit['option']` will be always merged to \"current option\"\n    // rather than original \"baseOption\". If they both override a prop, the result might be\n    // unexpected when media state changed after `setOption` called.\n    // If we really need to modify a props in each `MediaUnit['option']`, use the full version\n    // (`{baseOption, media}`) in `setOption`.\n    // For `timeline`, the case is the same.\n\n\n    if (!type || type === 'recreate' || type === 'timeline') {\n      var timelineOption = optionManager.getTimelineOption(this);\n\n      if (timelineOption) {\n        optionChanged = true;\n\n        this._mergeOption(timelineOption, opt);\n      }\n    }\n\n    if (!type || type === 'recreate' || type === 'media') {\n      var mediaOptions = optionManager.getMediaOption(this);\n\n      if (mediaOptions.length) {\n        each(mediaOptions, function (mediaOption) {\n          optionChanged = true;\n\n          this._mergeOption(mediaOption, opt);\n        }, this);\n      }\n    }\n\n    return optionChanged;\n  };\n\n  GlobalModel.prototype.mergeOption = function (option) {\n    this._mergeOption(option, null);\n  };\n\n  GlobalModel.prototype._mergeOption = function (newOption, opt) {\n    var option = this.option;\n    var componentsMap = this._componentsMap;\n    var componentsCount = this._componentsCount;\n    var newCmptTypes = [];\n    var newCmptTypeMap = createHashMap();\n    var replaceMergeMainTypeMap = opt && opt.replaceMergeMainTypeMap;\n    resetSourceDefaulter(this); // If no component class, merge directly.\n    // For example: color, animaiton options, etc.\n\n    each(newOption, function (componentOption, mainType) {\n      if (componentOption == null) {\n        return;\n      }\n\n      if (!ComponentModel.hasClass(mainType)) {\n        if (process.env.NODE_ENV !== 'production') {\n          var componentImportName = BUITIN_COMPONENTS_MAP[mainType];\n\n          if (componentImportName && !componetsMissingLogPrinted[componentImportName]) {\n            error(\"Component \" + mainType + \" is used but not imported.\\nimport { \" + componentImportName + \" } from 'echarts/components';\\necharts.use([\" + componentImportName + \"]);\");\n            componetsMissingLogPrinted[componentImportName] = true;\n          }\n        } // globalSettingTask.dirty();\n\n\n        option[mainType] = option[mainType] == null ? clone(componentOption) : merge(option[mainType], componentOption, true);\n      } else if (mainType) {\n        newCmptTypes.push(mainType);\n        newCmptTypeMap.set(mainType, true);\n      }\n    });\n\n    if (replaceMergeMainTypeMap) {\n      // If there is a mainType `xxx` in `replaceMerge` but not declared in option,\n      // we trade it as it is declared in option as `{xxx: []}`. Because:\n      // (1) for normal merge, `{xxx: null/undefined}` are the same meaning as `{xxx: []}`.\n      // (2) some preprocessor may convert some of `{xxx: null/undefined}` to `{xxx: []}`.\n      replaceMergeMainTypeMap.each(function (val, mainTypeInReplaceMerge) {\n        if (ComponentModel.hasClass(mainTypeInReplaceMerge) && !newCmptTypeMap.get(mainTypeInReplaceMerge)) {\n          newCmptTypes.push(mainTypeInReplaceMerge);\n          newCmptTypeMap.set(mainTypeInReplaceMerge, true);\n        }\n      });\n    }\n\n    ComponentModel.topologicalTravel(newCmptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);\n\n    function visitComponent(mainType) {\n      var newCmptOptionList = concatInternalOptions(this, mainType, modelUtil.normalizeToArray(newOption[mainType]));\n      var oldCmptList = componentsMap.get(mainType);\n      var mergeMode = // `!oldCmptList` means init. See the comment in `mappingToExists`\n      !oldCmptList ? 'replaceAll' : replaceMergeMainTypeMap && replaceMergeMainTypeMap.get(mainType) ? 'replaceMerge' : 'normalMerge';\n      var mappingResult = modelUtil.mappingToExists(oldCmptList, newCmptOptionList, mergeMode); // Set mainType and complete subType.\n\n      modelUtil.setComponentTypeToKeyInfo(mappingResult, mainType, ComponentModel); // Empty it before the travel, in order to prevent `this._componentsMap`\n      // from being used in the `init`/`mergeOption`/`optionUpdated` of some\n      // components, which is probably incorrect logic.\n\n      option[mainType] = null;\n      componentsMap.set(mainType, null);\n      componentsCount.set(mainType, 0);\n      var optionsByMainType = [];\n      var cmptsByMainType = [];\n      var cmptsCountByMainType = 0;\n      each(mappingResult, function (resultItem, index) {\n        var componentModel = resultItem.existing;\n        var newCmptOption = resultItem.newOption;\n\n        if (!newCmptOption) {\n          if (componentModel) {\n            // Consider where is no new option and should be merged using {},\n            // see removeEdgeAndAdd in topologicalTravel and\n            // ComponentModel.getAllClassMainTypes.\n            componentModel.mergeOption({}, this);\n            componentModel.optionUpdated({}, false);\n          } // If no both `resultItem.exist` and `resultItem.option`,\n          // either it is in `replaceMerge` and not matched by any id,\n          // or it has been removed in previous `replaceMerge` and left a \"hole\" in this component index.\n\n        } else {\n          var isSeriesType = mainType === 'series';\n          var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, !isSeriesType // Give a more detailed warn later if series don't exists\n          );\n\n          if (!ComponentModelClass) {\n            if (process.env.NODE_ENV !== 'production') {\n              var subType = resultItem.keyInfo.subType;\n              var seriesImportName = BUILTIN_CHARTS_MAP[subType];\n\n              if (!componetsMissingLogPrinted[subType]) {\n                componetsMissingLogPrinted[subType] = true;\n\n                if (seriesImportName) {\n                  error(\"Series \" + subType + \" is used but not imported.\\nimport { \" + seriesImportName + \" } from 'echarts/charts';\\necharts.use([\" + seriesImportName + \"]);\");\n                } else {\n                  error(\"Unkown series \" + subType);\n                }\n              }\n            }\n\n            return;\n          }\n\n          if (componentModel && componentModel.constructor === ComponentModelClass) {\n            componentModel.name = resultItem.keyInfo.name; // componentModel.settingTask && componentModel.settingTask.dirty();\n\n            componentModel.mergeOption(newCmptOption, this);\n            componentModel.optionUpdated(newCmptOption, false);\n          } else {\n            // PENDING Global as parent ?\n            var extraOpt = extend({\n              componentIndex: index\n            }, resultItem.keyInfo);\n            componentModel = new ComponentModelClass(newCmptOption, this, this, extraOpt); // Assign `keyInfo`\n\n            extend(componentModel, extraOpt);\n\n            if (resultItem.brandNew) {\n              componentModel.__requireNewView = true;\n            }\n\n            componentModel.init(newCmptOption, this, this); // Call optionUpdated after init.\n            // newCmptOption has been used as componentModel.option\n            // and may be merged with theme and default, so pass null\n            // to avoid confusion.\n\n            componentModel.optionUpdated(null, true);\n          }\n        }\n\n        if (componentModel) {\n          optionsByMainType.push(componentModel.option);\n          cmptsByMainType.push(componentModel);\n          cmptsCountByMainType++;\n        } else {\n          // Always do assign to avoid elided item in array.\n          optionsByMainType.push(void 0);\n          cmptsByMainType.push(void 0);\n        }\n      }, this);\n      option[mainType] = optionsByMainType;\n      componentsMap.set(mainType, cmptsByMainType);\n      componentsCount.set(mainType, cmptsCountByMainType); // Backup series for filtering.\n\n      if (mainType === 'series') {\n        reCreateSeriesIndices(this);\n      }\n    } // If no series declared, ensure `_seriesIndices` initialized.\n\n\n    if (!this._seriesIndices) {\n      reCreateSeriesIndices(this);\n    }\n  };\n  /**\n   * Get option for output (cloned option and inner info removed)\n   */\n\n\n  GlobalModel.prototype.getOption = function () {\n    var option = clone(this.option);\n    each(option, function (optInMainType, mainType) {\n      if (ComponentModel.hasClass(mainType)) {\n        var opts = modelUtil.normalizeToArray(optInMainType); // Inner cmpts need to be removed.\n        // Inner cmpts might not be at last since ec5.0, but still\n        // compatible for users: if inner cmpt at last, splice the returned array.\n\n        var realLen = opts.length;\n        var metNonInner = false;\n\n        for (var i = realLen - 1; i >= 0; i--) {\n          // Remove options with inner id.\n          if (opts[i] && !modelUtil.isComponentIdInternal(opts[i])) {\n            metNonInner = true;\n          } else {\n            opts[i] = null;\n            !metNonInner && realLen--;\n          }\n        }\n\n        opts.length = realLen;\n        option[mainType] = opts;\n      }\n    });\n    delete option[OPTION_INNER_KEY];\n    return option;\n  };\n\n  GlobalModel.prototype.getTheme = function () {\n    return this._theme;\n  };\n\n  GlobalModel.prototype.getLocaleModel = function () {\n    return this._locale;\n  };\n\n  GlobalModel.prototype.getLocale = function (localePosition) {\n    var locale = this.getLocaleModel();\n    return locale.get(localePosition);\n  };\n\n  GlobalModel.prototype.setUpdatePayload = function (payload) {\n    this._payload = payload;\n  };\n\n  GlobalModel.prototype.getUpdatePayload = function () {\n    return this._payload;\n  };\n  /**\n   * @param idx If not specified, return the first one.\n   */\n\n\n  GlobalModel.prototype.getComponent = function (mainType, idx) {\n    var list = this._componentsMap.get(mainType);\n\n    if (list) {\n      var cmpt = list[idx || 0];\n\n      if (cmpt) {\n        return cmpt;\n      } else if (idx == null) {\n        for (var i = 0; i < list.length; i++) {\n          if (list[i]) {\n            return list[i];\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @return Never be null/undefined.\n   */\n\n\n  GlobalModel.prototype.queryComponents = function (condition) {\n    var mainType = condition.mainType;\n\n    if (!mainType) {\n      return [];\n    }\n\n    var index = condition.index;\n    var id = condition.id;\n    var name = condition.name;\n\n    var cmpts = this._componentsMap.get(mainType);\n\n    if (!cmpts || !cmpts.length) {\n      return [];\n    }\n\n    var result;\n\n    if (index != null) {\n      result = [];\n      each(modelUtil.normalizeToArray(index), function (idx) {\n        cmpts[idx] && result.push(cmpts[idx]);\n      });\n    } else if (id != null) {\n      result = queryByIdOrName('id', id, cmpts);\n    } else if (name != null) {\n      result = queryByIdOrName('name', name, cmpts);\n    } else {\n      // Return all non-empty components in that mainType\n      result = filter(cmpts, function (cmpt) {\n        return !!cmpt;\n      });\n    }\n\n    return filterBySubType(result, condition);\n  };\n  /**\n   * The interface is different from queryComponents,\n   * which is convenient for inner usage.\n   *\n   * @usage\n   * let result = findComponents(\n   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n   * );\n   * let result = findComponents(\n   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n   * );\n   * let result = findComponents(\n   *     {mainType: 'series',\n   *     filter: function (model, index) {...}}\n   * );\n   * // result like [component0, componnet1, ...]\n   */\n\n\n  GlobalModel.prototype.findComponents = function (condition) {\n    var query = condition.query;\n    var mainType = condition.mainType;\n    var queryCond = getQueryCond(query);\n    var result = queryCond ? this.queryComponents(queryCond) // Retrieve all non-empty components.\n    : filter(this._componentsMap.get(mainType), function (cmpt) {\n      return !!cmpt;\n    });\n    return doFilter(filterBySubType(result, condition));\n\n    function getQueryCond(q) {\n      var indexAttr = mainType + 'Index';\n      var idAttr = mainType + 'Id';\n      var nameAttr = mainType + 'Name';\n      return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {\n        mainType: mainType,\n        // subType will be filtered finally.\n        index: q[indexAttr],\n        id: q[idAttr],\n        name: q[nameAttr]\n      } : null;\n    }\n\n    function doFilter(res) {\n      return condition.filter ? filter(res, condition.filter) : res;\n    }\n  };\n\n  GlobalModel.prototype.eachComponent = function (mainType, cb, context) {\n    var componentsMap = this._componentsMap;\n\n    if (isFunction(mainType)) {\n      var ctxForAll_1 = cb;\n      var cbForAll_1 = mainType;\n      componentsMap.each(function (cmpts, componentType) {\n        for (var i = 0; cmpts && i < cmpts.length; i++) {\n          var cmpt = cmpts[i];\n          cmpt && cbForAll_1.call(ctxForAll_1, componentType, cmpt, cmpt.componentIndex);\n        }\n      });\n    } else {\n      var cmpts = isString(mainType) ? componentsMap.get(mainType) : isObject(mainType) ? this.findComponents(mainType) : null;\n\n      for (var i = 0; cmpts && i < cmpts.length; i++) {\n        var cmpt = cmpts[i];\n        cmpt && cb.call(context, cmpt, cmpt.componentIndex);\n      }\n    }\n  };\n  /**\n   * Get series list before filtered by name.\n   */\n\n\n  GlobalModel.prototype.getSeriesByName = function (name) {\n    var nameStr = modelUtil.convertOptionIdName(name, null);\n    return filter(this._componentsMap.get('series'), function (oneSeries) {\n      return !!oneSeries && nameStr != null && oneSeries.name === nameStr;\n    });\n  };\n  /**\n   * Get series list before filtered by index.\n   */\n\n\n  GlobalModel.prototype.getSeriesByIndex = function (seriesIndex) {\n    return this._componentsMap.get('series')[seriesIndex];\n  };\n  /**\n   * Get series list before filtered by type.\n   * FIXME: rename to getRawSeriesByType?\n   */\n\n\n  GlobalModel.prototype.getSeriesByType = function (subType) {\n    return filter(this._componentsMap.get('series'), function (oneSeries) {\n      return !!oneSeries && oneSeries.subType === subType;\n    });\n  };\n  /**\n   * Get all series before filtered.\n   */\n\n\n  GlobalModel.prototype.getSeries = function () {\n    return filter(this._componentsMap.get('series').slice(), function (oneSeries) {\n      return !!oneSeries;\n    });\n  };\n  /**\n   * Count series before filtered.\n   */\n\n\n  GlobalModel.prototype.getSeriesCount = function () {\n    return this._componentsCount.get('series');\n  };\n  /**\n   * After filtering, series may be different\n   * frome raw series.\n   */\n\n\n  GlobalModel.prototype.eachSeries = function (cb, context) {\n    assertSeriesInitialized(this);\n    each(this._seriesIndices, function (rawSeriesIndex) {\n      var series = this._componentsMap.get('series')[rawSeriesIndex];\n\n      cb.call(context, series, rawSeriesIndex);\n    }, this);\n  };\n  /**\n   * Iterate raw series before filtered.\n   *\n   * @param {Function} cb\n   * @param {*} context\n   */\n\n\n  GlobalModel.prototype.eachRawSeries = function (cb, context) {\n    each(this._componentsMap.get('series'), function (series) {\n      series && cb.call(context, series, series.componentIndex);\n    });\n  };\n  /**\n   * After filtering, series may be different.\n   * frome raw series.\n   */\n\n\n  GlobalModel.prototype.eachSeriesByType = function (subType, cb, context) {\n    assertSeriesInitialized(this);\n    each(this._seriesIndices, function (rawSeriesIndex) {\n      var series = this._componentsMap.get('series')[rawSeriesIndex];\n\n      if (series.subType === subType) {\n        cb.call(context, series, rawSeriesIndex);\n      }\n    }, this);\n  };\n  /**\n   * Iterate raw series before filtered of given type.\n   */\n\n\n  GlobalModel.prototype.eachRawSeriesByType = function (subType, cb, context) {\n    return each(this.getSeriesByType(subType), cb, context);\n  };\n\n  GlobalModel.prototype.isSeriesFiltered = function (seriesModel) {\n    assertSeriesInitialized(this);\n    return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;\n  };\n\n  GlobalModel.prototype.getCurrentSeriesIndices = function () {\n    return (this._seriesIndices || []).slice();\n  };\n\n  GlobalModel.prototype.filterSeries = function (cb, context) {\n    assertSeriesInitialized(this);\n    var newSeriesIndices = [];\n    each(this._seriesIndices, function (seriesRawIdx) {\n      var series = this._componentsMap.get('series')[seriesRawIdx];\n\n      cb.call(context, series, seriesRawIdx) && newSeriesIndices.push(seriesRawIdx);\n    }, this);\n    this._seriesIndices = newSeriesIndices;\n    this._seriesIndicesMap = createHashMap(newSeriesIndices);\n  };\n\n  GlobalModel.prototype.restoreData = function (payload) {\n    reCreateSeriesIndices(this);\n    var componentsMap = this._componentsMap;\n    var componentTypes = [];\n    componentsMap.each(function (components, componentType) {\n      if (ComponentModel.hasClass(componentType)) {\n        componentTypes.push(componentType);\n      }\n    });\n    ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType) {\n      each(componentsMap.get(componentType), function (component) {\n        if (component && (componentType !== 'series' || !isNotTargetSeries(component, payload))) {\n          component.restoreData();\n        }\n      });\n    });\n  };\n\n  GlobalModel.internalField = function () {\n    reCreateSeriesIndices = function (ecModel) {\n      var seriesIndices = ecModel._seriesIndices = [];\n      each(ecModel._componentsMap.get('series'), function (series) {\n        // series may have been removed by `replaceMerge`.\n        series && seriesIndices.push(series.componentIndex);\n      });\n      ecModel._seriesIndicesMap = createHashMap(seriesIndices);\n    };\n\n    assertSeriesInitialized = function (ecModel) {\n      // Components that use _seriesIndices should depends on series component,\n      // which make sure that their initialization is after series.\n      if (process.env.NODE_ENV !== 'production') {\n        if (!ecModel._seriesIndices) {\n          throw new Error('Option should contains series.');\n        }\n      }\n    };\n\n    initBase = function (ecModel, baseOption) {\n      // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n      // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n      ecModel.option = {};\n      ecModel.option[OPTION_INNER_KEY] = OPTION_INNER_VALUE; // Init with series: [], in case of calling findSeries method\n      // before series initialized.\n\n      ecModel._componentsMap = createHashMap({\n        series: []\n      });\n      ecModel._componentsCount = createHashMap(); // If user spefied `option.aria`, aria will be enable. This detection should be\n      // performed before theme and globalDefault merge.\n\n      var airaOption = baseOption.aria;\n\n      if (isObject(airaOption) && airaOption.enabled == null) {\n        airaOption.enabled = true;\n      }\n\n      mergeTheme(baseOption, ecModel._theme.option); // TODO Needs clone when merging to the unexisted property\n\n      merge(baseOption, globalDefault, false);\n\n      ecModel._mergeOption(baseOption, null);\n    };\n  }();\n\n  return GlobalModel;\n}(Model);\n\nfunction isNotTargetSeries(seriesModel, payload) {\n  if (payload) {\n    var index = payload.seriesIndex;\n    var id = payload.seriesId;\n    var name_1 = payload.seriesName;\n    return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name_1 != null && seriesModel.name !== name_1;\n  }\n}\n\nfunction mergeTheme(option, theme) {\n  // PENDING\n  // NOT use `colorLayer` in theme if option has `color`\n  var notMergeColorLayer = option.color && !option.colorLayer;\n  each(theme, function (themeItem, name) {\n    if (name === 'colorLayer' && notMergeColorLayer) {\n      return;\n    } // If it is component model mainType, the model handles that merge later.\n    // otherwise, merge them here.\n\n\n    if (!ComponentModel.hasClass(name)) {\n      if (typeof themeItem === 'object') {\n        option[name] = !option[name] ? clone(themeItem) : merge(option[name], themeItem, false);\n      } else {\n        if (option[name] == null) {\n          option[name] = themeItem;\n        }\n      }\n    }\n  });\n}\n\nfunction queryByIdOrName(attr, idOrName, cmpts) {\n  // Here is a break from echarts4: string and number are\n  // treated as equal.\n  if (isArray(idOrName)) {\n    var keyMap_1 = createHashMap();\n    each(idOrName, function (idOrNameItem) {\n      if (idOrNameItem != null) {\n        var idName = modelUtil.convertOptionIdName(idOrNameItem, null);\n        idName != null && keyMap_1.set(idOrNameItem, true);\n      }\n    });\n    return filter(cmpts, function (cmpt) {\n      return cmpt && keyMap_1.get(cmpt[attr]);\n    });\n  } else {\n    var idName_1 = modelUtil.convertOptionIdName(idOrName, null);\n    return filter(cmpts, function (cmpt) {\n      return cmpt && idName_1 != null && cmpt[attr] === idName_1;\n    });\n  }\n}\n\nfunction filterBySubType(components, condition) {\n  // Using hasOwnProperty for restrict. Consider\n  // subType is undefined in user payload.\n  return condition.hasOwnProperty('subType') ? filter(components, function (cmpt) {\n    return cmpt && cmpt.subType === condition.subType;\n  }) : components;\n}\n\nfunction normalizeSetOptionInput(opts) {\n  var replaceMergeMainTypeMap = createHashMap();\n  opts && each(modelUtil.normalizeToArray(opts.replaceMerge), function (mainType) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(ComponentModel.hasClass(mainType), '\"' + mainType + '\" is not valid component main type in \"replaceMerge\"');\n    }\n\n    replaceMergeMainTypeMap.set(mainType, true);\n  });\n  return {\n    replaceMergeMainTypeMap: replaceMergeMainTypeMap\n  };\n}\n\nmixin(GlobalModel, PaletteMixin);\nexport default GlobalModel;","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/node_modules/echarts/lib/model/Global.js"],"names":["__extends","each","filter","isArray","isObject","isString","createHashMap","assert","clone","merge","extend","mixin","isFunction","modelUtil","Model","ComponentModel","globalDefault","resetSourceDefaulter","concatInternalOptions","PaletteMixin","error","reCreateSeriesIndices","assertSeriesInitialized","initBase","OPTION_INNER_KEY","OPTION_INNER_VALUE","BUITIN_COMPONENTS_MAP","grid","polar","geo","singleAxis","parallel","calendar","graphic","toolbox","tooltip","axisPointer","brush","title","timeline","markPoint","markLine","markArea","legend","dataZoom","visualMap","xAxis","yAxis","angleAxis","radiusAxis","BUILTIN_CHARTS_MAP","line","bar","pie","scatter","radar","map","tree","treemap","graph","gauge","funnel","sankey","boxplot","candlestick","effectScatter","lines","heatmap","pictorialBar","themeRiver","sunburst","custom","componetsMissingLogPrinted","GlobalModel","_super","apply","arguments","prototype","init","option","parentModel","ecModel","theme","locale","optionManager","_theme","_locale","_optionManager","setOption","opts","optionPreprocessorFuncs","process","env","NODE_ENV","innerOpt","normalizeSetOptionInput","_resetOption","resetOption","type","opt","optionChanged","baseOption","mountOption","restoreData","_mergeOption","timelineOption","getTimelineOption","mediaOptions","getMediaOption","length","mediaOption","mergeOption","newOption","componentsMap","_componentsMap","componentsCount","_componentsCount","newCmptTypes","newCmptTypeMap","replaceMergeMainTypeMap","componentOption","mainType","hasClass","componentImportName","push","set","val","mainTypeInReplaceMerge","get","topologicalTravel","getAllClassMainTypes","visitComponent","newCmptOptionList","normalizeToArray","oldCmptList","mergeMode","mappingResult","mappingToExists","setComponentTypeToKeyInfo","optionsByMainType","cmptsByMainType","cmptsCountByMainType","resultItem","index","componentModel","existing","newCmptOption","optionUpdated","isSeriesType","ComponentModelClass","getClass","keyInfo","subType","seriesImportName","constructor","name","extraOpt","componentIndex","brandNew","__requireNewView","_seriesIndices","getOption","optInMainType","realLen","metNonInner","i","isComponentIdInternal","getTheme","getLocaleModel","getLocale","localePosition","setUpdatePayload","payload","_payload","getUpdatePayload","getComponent","idx","list","cmpt","queryComponents","condition","id","cmpts","result","queryByIdOrName","filterBySubType","findComponents","query","queryCond","getQueryCond","doFilter","q","indexAttr","idAttr","nameAttr","res","eachComponent","cb","context","ctxForAll_1","cbForAll_1","componentType","call","getSeriesByName","nameStr","convertOptionIdName","oneSeries","getSeriesByIndex","seriesIndex","getSeriesByType","getSeries","slice","getSeriesCount","eachSeries","rawSeriesIndex","series","eachRawSeries","eachSeriesByType","eachRawSeriesByType","isSeriesFiltered","seriesModel","_seriesIndicesMap","getCurrentSeriesIndices","filterSeries","newSeriesIndices","seriesRawIdx","componentTypes","components","component","isNotTargetSeries","internalField","seriesIndices","Error","airaOption","aria","enabled","mergeTheme","seriesId","name_1","seriesName","notMergeColorLayer","color","colorLayer","themeItem","attr","idOrName","keyMap_1","idOrNameItem","idName","idName_1","hasOwnProperty","replaceMerge"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\n/**\n * Caution: If the mechanism should be changed some day, these cases\n * should be considered:\n *\n * (1) In `merge option` mode, if using the same option to call `setOption`\n * many times, the result should be the same (try our best to ensure that).\n * (2) In `merge option` mode, if a component has no id/name specified, it\n * will be merged by index, and the result sequence of the components is\n * consistent to the original sequence.\n * (3) In `replaceMerge` mode, keep the result sequence of the components is\n * consistent to the original sequence, even though there might result in \"hole\".\n * (4) `reset` feature (in toolbox). Find detailed info in comments about\n * `mergeOption` in module:echarts/model/OptionManager.\n */\n\nimport { each, filter, isArray, isObject, isString, createHashMap, assert, clone, merge, extend, mixin, isFunction } from 'zrender/lib/core/util';\nimport * as modelUtil from '../util/model';\nimport Model from './Model';\nimport ComponentModel from './Component';\nimport globalDefault from './globalDefault';\nimport { resetSourceDefaulter } from '../data/helper/sourceHelper';\nimport { concatInternalOptions } from './internalComponentCreator';\nimport { PaletteMixin } from './mixin/palette';\nimport { error } from '../util/log'; // -----------------------\n// Internal method names:\n// -----------------------\n\nvar reCreateSeriesIndices;\nvar assertSeriesInitialized;\nvar initBase;\nvar OPTION_INNER_KEY = '\\0_ec_inner';\nvar OPTION_INNER_VALUE = 1;\nvar BUITIN_COMPONENTS_MAP = {\n  grid: 'GridComponent',\n  polar: 'PolarComponent',\n  geo: 'GeoComponent',\n  singleAxis: 'SingleAxisComponent',\n  parallel: 'ParallelComponent',\n  calendar: 'CalendarComponent',\n  graphic: 'GraphicComponent',\n  toolbox: 'ToolboxComponent',\n  tooltip: 'TooltipComponent',\n  axisPointer: 'AxisPointerComponent',\n  brush: 'BrushComponent',\n  title: 'TitleComponent',\n  timeline: 'TimelineComponent',\n  markPoint: 'MarkPointComponent',\n  markLine: 'MarkLineComponent',\n  markArea: 'MarkAreaComponent',\n  legend: 'LegendComponent',\n  dataZoom: 'DataZoomComponent',\n  visualMap: 'VisualMapComponent',\n  // aria: 'AriaComponent',\n  // dataset: 'DatasetComponent',\n  // Dependencies\n  xAxis: 'GridComponent',\n  yAxis: 'GridComponent',\n  angleAxis: 'PolarComponent',\n  radiusAxis: 'PolarComponent'\n};\nvar BUILTIN_CHARTS_MAP = {\n  line: 'LineChart',\n  bar: 'BarChart',\n  pie: 'PieChart',\n  scatter: 'ScatterChart',\n  radar: 'RadarChart',\n  map: 'MapChart',\n  tree: 'TreeChart',\n  treemap: 'TreemapChart',\n  graph: 'GraphChart',\n  gauge: 'GaugeChart',\n  funnel: 'FunnelChart',\n  parallel: 'ParallelChart',\n  sankey: 'SankeyChart',\n  boxplot: 'BoxplotChart',\n  candlestick: 'CandlestickChart',\n  effectScatter: 'EffectScatterChart',\n  lines: 'LinesChart',\n  heatmap: 'HeatmapChart',\n  pictorialBar: 'PictorialBarChart',\n  themeRiver: 'ThemeRiverChart',\n  sunburst: 'SunburstChart',\n  custom: 'CustomChart'\n};\nvar componetsMissingLogPrinted = {};\n\nvar GlobalModel =\n/** @class */\nfunction (_super) {\n  __extends(GlobalModel, _super);\n\n  function GlobalModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GlobalModel.prototype.init = function (option, parentModel, ecModel, theme, locale, optionManager) {\n    theme = theme || {};\n    this.option = null; // Mark as not initialized.\n\n    this._theme = new Model(theme);\n    this._locale = new Model(locale);\n    this._optionManager = optionManager;\n  };\n\n  GlobalModel.prototype.setOption = function (option, opts, optionPreprocessorFuncs) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(option != null, 'option is null/undefined');\n      assert(option[OPTION_INNER_KEY] !== OPTION_INNER_VALUE, 'please use chart.getOption()');\n    }\n\n    var innerOpt = normalizeSetOptionInput(opts);\n\n    this._optionManager.setOption(option, optionPreprocessorFuncs, innerOpt);\n\n    this._resetOption(null, innerOpt);\n  };\n  /**\n   * @param type null/undefined: reset all.\n   *        'recreate': force recreate all.\n   *        'timeline': only reset timeline option\n   *        'media': only reset media query option\n   * @return Whether option changed.\n   */\n\n\n  GlobalModel.prototype.resetOption = function (type, opt) {\n    return this._resetOption(type, normalizeSetOptionInput(opt));\n  };\n\n  GlobalModel.prototype._resetOption = function (type, opt) {\n    var optionChanged = false;\n    var optionManager = this._optionManager;\n\n    if (!type || type === 'recreate') {\n      var baseOption = optionManager.mountOption(type === 'recreate');\n\n      if (!this.option || type === 'recreate') {\n        initBase(this, baseOption);\n      } else {\n        this.restoreData();\n\n        this._mergeOption(baseOption, opt);\n      }\n\n      optionChanged = true;\n    }\n\n    if (type === 'timeline' || type === 'media') {\n      this.restoreData();\n    } // By design, if `setOption(option2)` at the second time, and `option2` is a `ECUnitOption`,\n    // it should better not have the same props with `MediaUnit['option']`.\n    // Becuase either `option2` or `MediaUnit['option']` will be always merged to \"current option\"\n    // rather than original \"baseOption\". If they both override a prop, the result might be\n    // unexpected when media state changed after `setOption` called.\n    // If we really need to modify a props in each `MediaUnit['option']`, use the full version\n    // (`{baseOption, media}`) in `setOption`.\n    // For `timeline`, the case is the same.\n\n\n    if (!type || type === 'recreate' || type === 'timeline') {\n      var timelineOption = optionManager.getTimelineOption(this);\n\n      if (timelineOption) {\n        optionChanged = true;\n\n        this._mergeOption(timelineOption, opt);\n      }\n    }\n\n    if (!type || type === 'recreate' || type === 'media') {\n      var mediaOptions = optionManager.getMediaOption(this);\n\n      if (mediaOptions.length) {\n        each(mediaOptions, function (mediaOption) {\n          optionChanged = true;\n\n          this._mergeOption(mediaOption, opt);\n        }, this);\n      }\n    }\n\n    return optionChanged;\n  };\n\n  GlobalModel.prototype.mergeOption = function (option) {\n    this._mergeOption(option, null);\n  };\n\n  GlobalModel.prototype._mergeOption = function (newOption, opt) {\n    var option = this.option;\n    var componentsMap = this._componentsMap;\n    var componentsCount = this._componentsCount;\n    var newCmptTypes = [];\n    var newCmptTypeMap = createHashMap();\n    var replaceMergeMainTypeMap = opt && opt.replaceMergeMainTypeMap;\n    resetSourceDefaulter(this); // If no component class, merge directly.\n    // For example: color, animaiton options, etc.\n\n    each(newOption, function (componentOption, mainType) {\n      if (componentOption == null) {\n        return;\n      }\n\n      if (!ComponentModel.hasClass(mainType)) {\n        if (process.env.NODE_ENV !== 'production') {\n          var componentImportName = BUITIN_COMPONENTS_MAP[mainType];\n\n          if (componentImportName && !componetsMissingLogPrinted[componentImportName]) {\n            error(\"Component \" + mainType + \" is used but not imported.\\nimport { \" + componentImportName + \" } from 'echarts/components';\\necharts.use([\" + componentImportName + \"]);\");\n            componetsMissingLogPrinted[componentImportName] = true;\n          }\n        } // globalSettingTask.dirty();\n\n\n        option[mainType] = option[mainType] == null ? clone(componentOption) : merge(option[mainType], componentOption, true);\n      } else if (mainType) {\n        newCmptTypes.push(mainType);\n        newCmptTypeMap.set(mainType, true);\n      }\n    });\n\n    if (replaceMergeMainTypeMap) {\n      // If there is a mainType `xxx` in `replaceMerge` but not declared in option,\n      // we trade it as it is declared in option as `{xxx: []}`. Because:\n      // (1) for normal merge, `{xxx: null/undefined}` are the same meaning as `{xxx: []}`.\n      // (2) some preprocessor may convert some of `{xxx: null/undefined}` to `{xxx: []}`.\n      replaceMergeMainTypeMap.each(function (val, mainTypeInReplaceMerge) {\n        if (ComponentModel.hasClass(mainTypeInReplaceMerge) && !newCmptTypeMap.get(mainTypeInReplaceMerge)) {\n          newCmptTypes.push(mainTypeInReplaceMerge);\n          newCmptTypeMap.set(mainTypeInReplaceMerge, true);\n        }\n      });\n    }\n\n    ComponentModel.topologicalTravel(newCmptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);\n\n    function visitComponent(mainType) {\n      var newCmptOptionList = concatInternalOptions(this, mainType, modelUtil.normalizeToArray(newOption[mainType]));\n      var oldCmptList = componentsMap.get(mainType);\n      var mergeMode = // `!oldCmptList` means init. See the comment in `mappingToExists`\n      !oldCmptList ? 'replaceAll' : replaceMergeMainTypeMap && replaceMergeMainTypeMap.get(mainType) ? 'replaceMerge' : 'normalMerge';\n      var mappingResult = modelUtil.mappingToExists(oldCmptList, newCmptOptionList, mergeMode); // Set mainType and complete subType.\n\n      modelUtil.setComponentTypeToKeyInfo(mappingResult, mainType, ComponentModel); // Empty it before the travel, in order to prevent `this._componentsMap`\n      // from being used in the `init`/`mergeOption`/`optionUpdated` of some\n      // components, which is probably incorrect logic.\n\n      option[mainType] = null;\n      componentsMap.set(mainType, null);\n      componentsCount.set(mainType, 0);\n      var optionsByMainType = [];\n      var cmptsByMainType = [];\n      var cmptsCountByMainType = 0;\n      each(mappingResult, function (resultItem, index) {\n        var componentModel = resultItem.existing;\n        var newCmptOption = resultItem.newOption;\n\n        if (!newCmptOption) {\n          if (componentModel) {\n            // Consider where is no new option and should be merged using {},\n            // see removeEdgeAndAdd in topologicalTravel and\n            // ComponentModel.getAllClassMainTypes.\n            componentModel.mergeOption({}, this);\n            componentModel.optionUpdated({}, false);\n          } // If no both `resultItem.exist` and `resultItem.option`,\n          // either it is in `replaceMerge` and not matched by any id,\n          // or it has been removed in previous `replaceMerge` and left a \"hole\" in this component index.\n\n        } else {\n          var isSeriesType = mainType === 'series';\n          var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, !isSeriesType // Give a more detailed warn later if series don't exists\n          );\n\n          if (!ComponentModelClass) {\n            if (process.env.NODE_ENV !== 'production') {\n              var subType = resultItem.keyInfo.subType;\n              var seriesImportName = BUILTIN_CHARTS_MAP[subType];\n\n              if (!componetsMissingLogPrinted[subType]) {\n                componetsMissingLogPrinted[subType] = true;\n\n                if (seriesImportName) {\n                  error(\"Series \" + subType + \" is used but not imported.\\nimport { \" + seriesImportName + \" } from 'echarts/charts';\\necharts.use([\" + seriesImportName + \"]);\");\n                } else {\n                  error(\"Unkown series \" + subType);\n                }\n              }\n            }\n\n            return;\n          }\n\n          if (componentModel && componentModel.constructor === ComponentModelClass) {\n            componentModel.name = resultItem.keyInfo.name; // componentModel.settingTask && componentModel.settingTask.dirty();\n\n            componentModel.mergeOption(newCmptOption, this);\n            componentModel.optionUpdated(newCmptOption, false);\n          } else {\n            // PENDING Global as parent ?\n            var extraOpt = extend({\n              componentIndex: index\n            }, resultItem.keyInfo);\n            componentModel = new ComponentModelClass(newCmptOption, this, this, extraOpt); // Assign `keyInfo`\n\n            extend(componentModel, extraOpt);\n\n            if (resultItem.brandNew) {\n              componentModel.__requireNewView = true;\n            }\n\n            componentModel.init(newCmptOption, this, this); // Call optionUpdated after init.\n            // newCmptOption has been used as componentModel.option\n            // and may be merged with theme and default, so pass null\n            // to avoid confusion.\n\n            componentModel.optionUpdated(null, true);\n          }\n        }\n\n        if (componentModel) {\n          optionsByMainType.push(componentModel.option);\n          cmptsByMainType.push(componentModel);\n          cmptsCountByMainType++;\n        } else {\n          // Always do assign to avoid elided item in array.\n          optionsByMainType.push(void 0);\n          cmptsByMainType.push(void 0);\n        }\n      }, this);\n      option[mainType] = optionsByMainType;\n      componentsMap.set(mainType, cmptsByMainType);\n      componentsCount.set(mainType, cmptsCountByMainType); // Backup series for filtering.\n\n      if (mainType === 'series') {\n        reCreateSeriesIndices(this);\n      }\n    } // If no series declared, ensure `_seriesIndices` initialized.\n\n\n    if (!this._seriesIndices) {\n      reCreateSeriesIndices(this);\n    }\n  };\n  /**\n   * Get option for output (cloned option and inner info removed)\n   */\n\n\n  GlobalModel.prototype.getOption = function () {\n    var option = clone(this.option);\n    each(option, function (optInMainType, mainType) {\n      if (ComponentModel.hasClass(mainType)) {\n        var opts = modelUtil.normalizeToArray(optInMainType); // Inner cmpts need to be removed.\n        // Inner cmpts might not be at last since ec5.0, but still\n        // compatible for users: if inner cmpt at last, splice the returned array.\n\n        var realLen = opts.length;\n        var metNonInner = false;\n\n        for (var i = realLen - 1; i >= 0; i--) {\n          // Remove options with inner id.\n          if (opts[i] && !modelUtil.isComponentIdInternal(opts[i])) {\n            metNonInner = true;\n          } else {\n            opts[i] = null;\n            !metNonInner && realLen--;\n          }\n        }\n\n        opts.length = realLen;\n        option[mainType] = opts;\n      }\n    });\n    delete option[OPTION_INNER_KEY];\n    return option;\n  };\n\n  GlobalModel.prototype.getTheme = function () {\n    return this._theme;\n  };\n\n  GlobalModel.prototype.getLocaleModel = function () {\n    return this._locale;\n  };\n\n  GlobalModel.prototype.getLocale = function (localePosition) {\n    var locale = this.getLocaleModel();\n    return locale.get(localePosition);\n  };\n\n  GlobalModel.prototype.setUpdatePayload = function (payload) {\n    this._payload = payload;\n  };\n\n  GlobalModel.prototype.getUpdatePayload = function () {\n    return this._payload;\n  };\n  /**\n   * @param idx If not specified, return the first one.\n   */\n\n\n  GlobalModel.prototype.getComponent = function (mainType, idx) {\n    var list = this._componentsMap.get(mainType);\n\n    if (list) {\n      var cmpt = list[idx || 0];\n\n      if (cmpt) {\n        return cmpt;\n      } else if (idx == null) {\n        for (var i = 0; i < list.length; i++) {\n          if (list[i]) {\n            return list[i];\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @return Never be null/undefined.\n   */\n\n\n  GlobalModel.prototype.queryComponents = function (condition) {\n    var mainType = condition.mainType;\n\n    if (!mainType) {\n      return [];\n    }\n\n    var index = condition.index;\n    var id = condition.id;\n    var name = condition.name;\n\n    var cmpts = this._componentsMap.get(mainType);\n\n    if (!cmpts || !cmpts.length) {\n      return [];\n    }\n\n    var result;\n\n    if (index != null) {\n      result = [];\n      each(modelUtil.normalizeToArray(index), function (idx) {\n        cmpts[idx] && result.push(cmpts[idx]);\n      });\n    } else if (id != null) {\n      result = queryByIdOrName('id', id, cmpts);\n    } else if (name != null) {\n      result = queryByIdOrName('name', name, cmpts);\n    } else {\n      // Return all non-empty components in that mainType\n      result = filter(cmpts, function (cmpt) {\n        return !!cmpt;\n      });\n    }\n\n    return filterBySubType(result, condition);\n  };\n  /**\n   * The interface is different from queryComponents,\n   * which is convenient for inner usage.\n   *\n   * @usage\n   * let result = findComponents(\n   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n   * );\n   * let result = findComponents(\n   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n   * );\n   * let result = findComponents(\n   *     {mainType: 'series',\n   *     filter: function (model, index) {...}}\n   * );\n   * // result like [component0, componnet1, ...]\n   */\n\n\n  GlobalModel.prototype.findComponents = function (condition) {\n    var query = condition.query;\n    var mainType = condition.mainType;\n    var queryCond = getQueryCond(query);\n    var result = queryCond ? this.queryComponents(queryCond) // Retrieve all non-empty components.\n    : filter(this._componentsMap.get(mainType), function (cmpt) {\n      return !!cmpt;\n    });\n    return doFilter(filterBySubType(result, condition));\n\n    function getQueryCond(q) {\n      var indexAttr = mainType + 'Index';\n      var idAttr = mainType + 'Id';\n      var nameAttr = mainType + 'Name';\n      return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {\n        mainType: mainType,\n        // subType will be filtered finally.\n        index: q[indexAttr],\n        id: q[idAttr],\n        name: q[nameAttr]\n      } : null;\n    }\n\n    function doFilter(res) {\n      return condition.filter ? filter(res, condition.filter) : res;\n    }\n  };\n\n  GlobalModel.prototype.eachComponent = function (mainType, cb, context) {\n    var componentsMap = this._componentsMap;\n\n    if (isFunction(mainType)) {\n      var ctxForAll_1 = cb;\n      var cbForAll_1 = mainType;\n      componentsMap.each(function (cmpts, componentType) {\n        for (var i = 0; cmpts && i < cmpts.length; i++) {\n          var cmpt = cmpts[i];\n          cmpt && cbForAll_1.call(ctxForAll_1, componentType, cmpt, cmpt.componentIndex);\n        }\n      });\n    } else {\n      var cmpts = isString(mainType) ? componentsMap.get(mainType) : isObject(mainType) ? this.findComponents(mainType) : null;\n\n      for (var i = 0; cmpts && i < cmpts.length; i++) {\n        var cmpt = cmpts[i];\n        cmpt && cb.call(context, cmpt, cmpt.componentIndex);\n      }\n    }\n  };\n  /**\n   * Get series list before filtered by name.\n   */\n\n\n  GlobalModel.prototype.getSeriesByName = function (name) {\n    var nameStr = modelUtil.convertOptionIdName(name, null);\n    return filter(this._componentsMap.get('series'), function (oneSeries) {\n      return !!oneSeries && nameStr != null && oneSeries.name === nameStr;\n    });\n  };\n  /**\n   * Get series list before filtered by index.\n   */\n\n\n  GlobalModel.prototype.getSeriesByIndex = function (seriesIndex) {\n    return this._componentsMap.get('series')[seriesIndex];\n  };\n  /**\n   * Get series list before filtered by type.\n   * FIXME: rename to getRawSeriesByType?\n   */\n\n\n  GlobalModel.prototype.getSeriesByType = function (subType) {\n    return filter(this._componentsMap.get('series'), function (oneSeries) {\n      return !!oneSeries && oneSeries.subType === subType;\n    });\n  };\n  /**\n   * Get all series before filtered.\n   */\n\n\n  GlobalModel.prototype.getSeries = function () {\n    return filter(this._componentsMap.get('series').slice(), function (oneSeries) {\n      return !!oneSeries;\n    });\n  };\n  /**\n   * Count series before filtered.\n   */\n\n\n  GlobalModel.prototype.getSeriesCount = function () {\n    return this._componentsCount.get('series');\n  };\n  /**\n   * After filtering, series may be different\n   * frome raw series.\n   */\n\n\n  GlobalModel.prototype.eachSeries = function (cb, context) {\n    assertSeriesInitialized(this);\n    each(this._seriesIndices, function (rawSeriesIndex) {\n      var series = this._componentsMap.get('series')[rawSeriesIndex];\n\n      cb.call(context, series, rawSeriesIndex);\n    }, this);\n  };\n  /**\n   * Iterate raw series before filtered.\n   *\n   * @param {Function} cb\n   * @param {*} context\n   */\n\n\n  GlobalModel.prototype.eachRawSeries = function (cb, context) {\n    each(this._componentsMap.get('series'), function (series) {\n      series && cb.call(context, series, series.componentIndex);\n    });\n  };\n  /**\n   * After filtering, series may be different.\n   * frome raw series.\n   */\n\n\n  GlobalModel.prototype.eachSeriesByType = function (subType, cb, context) {\n    assertSeriesInitialized(this);\n    each(this._seriesIndices, function (rawSeriesIndex) {\n      var series = this._componentsMap.get('series')[rawSeriesIndex];\n\n      if (series.subType === subType) {\n        cb.call(context, series, rawSeriesIndex);\n      }\n    }, this);\n  };\n  /**\n   * Iterate raw series before filtered of given type.\n   */\n\n\n  GlobalModel.prototype.eachRawSeriesByType = function (subType, cb, context) {\n    return each(this.getSeriesByType(subType), cb, context);\n  };\n\n  GlobalModel.prototype.isSeriesFiltered = function (seriesModel) {\n    assertSeriesInitialized(this);\n    return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;\n  };\n\n  GlobalModel.prototype.getCurrentSeriesIndices = function () {\n    return (this._seriesIndices || []).slice();\n  };\n\n  GlobalModel.prototype.filterSeries = function (cb, context) {\n    assertSeriesInitialized(this);\n    var newSeriesIndices = [];\n    each(this._seriesIndices, function (seriesRawIdx) {\n      var series = this._componentsMap.get('series')[seriesRawIdx];\n\n      cb.call(context, series, seriesRawIdx) && newSeriesIndices.push(seriesRawIdx);\n    }, this);\n    this._seriesIndices = newSeriesIndices;\n    this._seriesIndicesMap = createHashMap(newSeriesIndices);\n  };\n\n  GlobalModel.prototype.restoreData = function (payload) {\n    reCreateSeriesIndices(this);\n    var componentsMap = this._componentsMap;\n    var componentTypes = [];\n    componentsMap.each(function (components, componentType) {\n      if (ComponentModel.hasClass(componentType)) {\n        componentTypes.push(componentType);\n      }\n    });\n    ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType) {\n      each(componentsMap.get(componentType), function (component) {\n        if (component && (componentType !== 'series' || !isNotTargetSeries(component, payload))) {\n          component.restoreData();\n        }\n      });\n    });\n  };\n\n  GlobalModel.internalField = function () {\n    reCreateSeriesIndices = function (ecModel) {\n      var seriesIndices = ecModel._seriesIndices = [];\n      each(ecModel._componentsMap.get('series'), function (series) {\n        // series may have been removed by `replaceMerge`.\n        series && seriesIndices.push(series.componentIndex);\n      });\n      ecModel._seriesIndicesMap = createHashMap(seriesIndices);\n    };\n\n    assertSeriesInitialized = function (ecModel) {\n      // Components that use _seriesIndices should depends on series component,\n      // which make sure that their initialization is after series.\n      if (process.env.NODE_ENV !== 'production') {\n        if (!ecModel._seriesIndices) {\n          throw new Error('Option should contains series.');\n        }\n      }\n    };\n\n    initBase = function (ecModel, baseOption) {\n      // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n      // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n      ecModel.option = {};\n      ecModel.option[OPTION_INNER_KEY] = OPTION_INNER_VALUE; // Init with series: [], in case of calling findSeries method\n      // before series initialized.\n\n      ecModel._componentsMap = createHashMap({\n        series: []\n      });\n      ecModel._componentsCount = createHashMap(); // If user spefied `option.aria`, aria will be enable. This detection should be\n      // performed before theme and globalDefault merge.\n\n      var airaOption = baseOption.aria;\n\n      if (isObject(airaOption) && airaOption.enabled == null) {\n        airaOption.enabled = true;\n      }\n\n      mergeTheme(baseOption, ecModel._theme.option); // TODO Needs clone when merging to the unexisted property\n\n      merge(baseOption, globalDefault, false);\n\n      ecModel._mergeOption(baseOption, null);\n    };\n  }();\n\n  return GlobalModel;\n}(Model);\n\nfunction isNotTargetSeries(seriesModel, payload) {\n  if (payload) {\n    var index = payload.seriesIndex;\n    var id = payload.seriesId;\n    var name_1 = payload.seriesName;\n    return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name_1 != null && seriesModel.name !== name_1;\n  }\n}\n\nfunction mergeTheme(option, theme) {\n  // PENDING\n  // NOT use `colorLayer` in theme if option has `color`\n  var notMergeColorLayer = option.color && !option.colorLayer;\n  each(theme, function (themeItem, name) {\n    if (name === 'colorLayer' && notMergeColorLayer) {\n      return;\n    } // If it is component model mainType, the model handles that merge later.\n    // otherwise, merge them here.\n\n\n    if (!ComponentModel.hasClass(name)) {\n      if (typeof themeItem === 'object') {\n        option[name] = !option[name] ? clone(themeItem) : merge(option[name], themeItem, false);\n      } else {\n        if (option[name] == null) {\n          option[name] = themeItem;\n        }\n      }\n    }\n  });\n}\n\nfunction queryByIdOrName(attr, idOrName, cmpts) {\n  // Here is a break from echarts4: string and number are\n  // treated as equal.\n  if (isArray(idOrName)) {\n    var keyMap_1 = createHashMap();\n    each(idOrName, function (idOrNameItem) {\n      if (idOrNameItem != null) {\n        var idName = modelUtil.convertOptionIdName(idOrNameItem, null);\n        idName != null && keyMap_1.set(idOrNameItem, true);\n      }\n    });\n    return filter(cmpts, function (cmpt) {\n      return cmpt && keyMap_1.get(cmpt[attr]);\n    });\n  } else {\n    var idName_1 = modelUtil.convertOptionIdName(idOrName, null);\n    return filter(cmpts, function (cmpt) {\n      return cmpt && idName_1 != null && cmpt[attr] === idName_1;\n    });\n  }\n}\n\nfunction filterBySubType(components, condition) {\n  // Using hasOwnProperty for restrict. Consider\n  // subType is undefined in user payload.\n  return condition.hasOwnProperty('subType') ? filter(components, function (cmpt) {\n    return cmpt && cmpt.subType === condition.subType;\n  }) : components;\n}\n\nfunction normalizeSetOptionInput(opts) {\n  var replaceMergeMainTypeMap = createHashMap();\n  opts && each(modelUtil.normalizeToArray(opts.replaceMerge), function (mainType) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(ComponentModel.hasClass(mainType), '\"' + mainType + '\" is not valid component main type in \"replaceMerge\"');\n    }\n\n    replaceMergeMainTypeMap.set(mainType, true);\n  });\n  return {\n    replaceMergeMainTypeMap: replaceMergeMainTypeMap\n  };\n}\n\nmixin(GlobalModel, PaletteMixin);\nexport default GlobalModel;"]},"metadata":{},"sourceType":"module"}