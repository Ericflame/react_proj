{"ast":null,"code":"import\"antd/es/card/style\";import _Card from\"antd/es/card\";import\"antd/es/button/style\";import _Button from\"antd/es/button\";import _objectSpread from\"C:/Users/PC/Desktop/\\u6E90\\u7801/react_Project/react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/Users/PC/Desktop/\\u6E90\\u7801/react_Project/react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import\"antd/es/message/style\";import _message from\"antd/es/message\";import _asyncToGenerator from\"C:/Users/PC/Desktop/\\u6E90\\u7801/react_Project/react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/Users/PC/Desktop/\\u6E90\\u7801/react_Project/react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/PC/Desktop/\\u6E90\\u7801/react_Project/react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/PC/Desktop/\\u6E90\\u7801/react_Project/react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/PC/Desktop/\\u6E90\\u7801/react_Project/react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd/es/select/style\";import _Select from\"antd/es/select\";import\"antd/es/input/style\";import _Input from\"antd/es/input\";import\"antd/es/form/style\";import _Form from\"antd/es/form\";var _dec,_class,_temp;import React,{Component}from'react';import{connect}from'react-redux';import{ArrowLeftOutlined}from'@ant-design/icons';import{reqCategoryList,reqAddProduct,reqUpdateProduct}from'../../api';import PicturesWall from'./picture_wall';import RichTextEditor from'./rich-text-editor';//数据验证的两种方式:1、form.UseForm 2、formRef = React.createRef();\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Item=_Form.Item;var TextArea=_Input.TextArea;var Option=_Select.Option;var AddUpdate=(_dec=connect(function(state){return{categoryList:state.categoryList,productList:state.productList};},{}),_dec(_class=(_temp=/*#__PURE__*/function(_Component){_inherits(AddUpdate,_Component);var _super=_createSuper(AddUpdate);function AddUpdate(props){var _this;_classCallCheck(this,AddUpdate);_this=_super.call(this,props);// 创建用来保存ref标识的标签对象的容器\n_this.formRef=/*#__PURE__*/React.createRef();_this.state={categoryList:[],operaType:'add',options:[],name:'',desc:'',price:'',categoryId:'',detail:'',imgs:'',_id:''};_this.getCategoryList=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result,status,data,msg;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return reqCategoryList();case 2:result=_context.sent;status=result.status,data=result.data,msg=result.msg;if(status===0)_this.setState({categoryList:data});else _message.error(msg);case 5:case\"end\":return _context.stop();}}},_callee);}));_this.submit=function(event){event.preventDefault();//从上传组件中获取已经上传的图片数组\nvar imgs=_this.refs.pictureWall.getImgArr();// console.log(imgs);\n//从富文本组件中获取用户输入的文字转换为富文本的字符串\nvar detail=_this.refs.editor.getRichText();// console.log(detail);\n// 进行表单验证 通过才发送请求\n_this.formRef.current.validateFields().then(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values){var name,desc,price,categoryIds,categoryId,pCategoryId,_this$state,operaType,_id,product1,product2,result,_result,status,msg;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:name=values.name,desc=values.desc,price=values.price,categoryIds=values.categoryIds;// 1、收集数据\ncategoryId=categoryIds;pCategoryId=categoryIds;_this$state=_this.state,operaType=_this$state.operaType,_id=_this$state._id;product1={name:name,desc:desc,price:price,categoryIds:categoryIds,imgs:imgs,detail:detail,categoryId:categoryId,pCategoryId:pCategoryId};product2={name:name,desc:desc,price:price,categoryIds:categoryIds,imgs:imgs,detail:detail,categoryId:categoryId,pCategoryId:pCategoryId,_id:_id};// console.log(product);\nif(!(operaType==='add')){_context2.next=12;break;}_context2.next=9;return reqAddProduct(product1);case 9:result=_context2.sent;_context2.next=15;break;case 12:_context2.next=14;return reqUpdateProduct(product2);case 14:result=_context2.sent;case 15:// console.log(result);\n_result=result,status=_result.status,msg=_result.msg;if(status===0){_message.success('操作成功');_this.props.history.replace('/Admin/prod_about/Product');}else{_message.error(msg);}case 17:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}()).catch(function(errorInfo){console.log(\"哈哈\");});};_this.validatePrice=function(value){// console.log(value);\nif(value){if(value*1>=0){return Promise.resolve();}else{return Promise.resolve();/* reject('价格必须要大于0！') */}}else{return Promise.resolve();}};_this.pw=/*#__PURE__*/React.createRef();_this.editor=/*#__PURE__*/React.createRef();return _this;}_createClass(AddUpdate,[{key:\"componentDidMount\",value:function componentDidMount(){var _this$props=this.props,categoryList=_this$props.categoryList,productList=_this$props.productList;var id=this.props.match.params.id;// console.log(id);\nif(categoryList.length)this.setState({categoryList:categoryList});else this.getCategoryList();if(id){this.setState({operaType:'update'});if(productList.length){var result=productList.find(function(item){// console.log(item);\nreturn item._id===id;});if(result){// console.log(result);\nconsole.log(result.name);this.setState(_objectSpread({},result));this.refs.pictureWall.setFileList(result.imgs);this.refs.editor.setRichText(result.detail);}}/* else{\r\n                this.getProductList()\r\n            } */}}/* getProductList = async()=>{\r\n        let result = await reqProdById()\r\n        const {status,data,msg} = result\r\n        if(status === 0){\r\n            message.success('hh')\r\n            this.setstate({...data})\r\n            this.refs.pictureWall.setFileList(result.imgs)\r\n            this.refs.editor.setRichText(result.detail)\r\n        }else{\r\n            message/error(msg)\r\n        }\r\n    } */},{key:\"render\",value://   // 用于加载下一级列表的回调函数\n//   loadData = async selectedOptions => {\n//     // 得到点击的列表项 即option对象\n//     const targetOption = selectedOptions[0]\n//     // 显示loading效果\n//     targetOption.loading = true\n//     // 根据选中的分类 请求获取二级分类列表\n//     const subCategorys = await this.getCategorys(targetOption.value)\n//     // 隐藏loading\n//     targetOption.loading = false\n//     if (subCategorys && subCategorys.length > 0) {\n//       // 说明现在存在二级分类\n//       // 生成一个二级列表的options单\n//       const cOptions = subCategorys.map(c=>({\n//         value: c._id,\n//         label: c.name,\n//         isLeaf: true,  \n//       }))\n//       // 关联到当前的target.option身上 ===> children\n//       targetOption.children = cOptions\n//     } else {\n//       // 当前选中的列表项没有二级分类\n//       targetOption.isLeaf = true \n//     }\n//       // 更新options状态\n//       this.setState({\n//         options: [...this.state.options],\n//       })\n//   }\n//   submit =  () => {\n//     // 进行表单验证 通过才发送请求\n//     this.formRef.current.validateFields()\n//     .then( async values => {\n//       // 1、收集数据\n//       // console.log('values',values);\n//       const {name,desc,price,categoryIds} = values\n//       let pCategoryId,categoryId\n//       if (categoryIds.length === 1) {\n//         pCategoryId = '0'\n//         categoryId = categoryIds[0]\n//       } else {\n//         pCategoryId = categoryIds[0]\n//         categoryId = categoryIds[1]\n//       }\n//       const imgs= this.pw.current.getImgs()\n//       const detail = this.editor.current.getDetail()\n//       // 封装成product对象\n//       const product = {name,desc,price,imgs,detail}\n//       console.log('product',product);\n//       /* // 如果是更新需要添加_id\n//       if (this.isUpdate) {\n//         product._id = this.product._id\n//       }\n//       // 2、调用接口请求函数去添加/更新\n//       const result = await reqAddOrUpdateProduct(product)\n//       console.log(result);\n//       // 3、根据结果显示\n//       if (result.status === 0) {\n//         message.success(`${this.isUpdate ? '更新':'添加'}商品成功！`)\n//         this.props.history.goBack()\n//       } else {\n//         message.error(`${this.isUpdate ? '更新':'添加'}商品失败！`)\n//       } */\n//       let result\n//       // 如果是更新需要添加_id\n//       if (this.isUpdate) {\n//         product._id = this.product._id\n//         result = await reaUpdateProduct(product)\n//         if (result.status === 0) {\n//           message.success(` 更新商品成功！`)\n//           this.props.history.goBack()\n//         } else {\n//           message.error(`更新商品失败！`)\n//         }\n//       } else {\n//         result = await reqAddProduct(product)\n//         // console.log('添加',result);   result.status===1\n//         if (result.status === 0) {\n//           message.success(` 添加商品成功！`)\n//           this.props.history.goBack()\n//         } else {\n//           message.error(`添加商品失败！`)\n//         }\n//       }\n//       // alert('提交请求成功')\n//       // console.log('submitvalue',values);\n//       // console.log('submit', this.pw.current.getImgs());\n//       // const imgs= this.pw.current.getImgs()\n//       // const detail = this.editor.current.getDetail()\n//       // console.log('submit',imgs,detail);\n//     })\n//     .catch(errInfo => {\n//       console.log('请求提交错误', errInfo);\n//     })\n//   }\n//   componentDidMount() {\n//     this.getCategorys('0')  //获取一级列表\n//   }\n//   UNSAFE_componentWillMount(){\n//     // 如果是添加则会没值 否则有值\n//     const product = this.props.location.state\n//     // 保存是否为更新的标识  \n//     this.isUpdate = !!product  //强制转换为一个布尔值\n//     // 保存商品 若没有 保存一个空对象 则下面设置初始值则不会报错\n//     this.product = product || {}\n//   }\nfunction render(){var _this2=this;var operaType=this.state.operaType;console.log(this.state.name);console.log(this.state.price);console.log(this.state.detail);console.log(this.state.imgs);// 指定Item配置对象\nvar layout={labelCol:{span:2//指定左侧label的宽度\n},wrapperCol:{span:8//指定右侧包裹的宽度\n}};/* \r\n              const {isUpdate,product} = this\r\n              const {pCategoryId,categoryId,imgs,detail} = product\r\n              // 用来接收级联分类ID的数组\r\n              const categorys = []\r\n              if (isUpdate) {\r\n                // 商品处于一级分类列表中\r\n                if (pCategoryId === '0') {\r\n                  categorys.push(categoryId)\r\n                } else {\r\n                  // 商品为二级分类\r\n                  categorys.push(pCategoryId)\r\n                  categorys.push(categoryId)\r\n                }\r\n              } */var title=/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(_Button,{type:\"link\",onClick:function onClick(){return _this2.props.history.goBack();},children:/*#__PURE__*/_jsx(ArrowLeftOutlined,{style:{marginRight:10,fontSize:20}})}),/*#__PURE__*/_jsx(\"span\",{children:operaType?'修改商品':'添加商品'})]});return/*#__PURE__*/_jsx(_Card,{title:title,children:/*#__PURE__*/_jsxs(_Form,_objectSpread(_objectSpread({ref:this.formRef},layout),{},{children:[/*#__PURE__*/_jsx(Item,{name:\"name\",initialValue:this.state.name,rules:[{required:true,message:'必须输入商品名称'}],label:\"\\u5546\\u54C1\\u540D\\u79F0\",children:/*#__PURE__*/_jsx(_Input,{placeholder:\"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u540D\\u79F0\"})}),/*#__PURE__*/_jsx(Item,{name:\"desc\",initialValue:this.state.des||'',rules:[{required:true,message:'必须输入商品描述'}],label:\"\\u5546\\u54C1\\u63CF\\u8FF0\",children:/*#__PURE__*/_jsx(TextArea,{placeholder:\"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u63CF\\u8FF0\",autoSize:{minRows:2,maxRows:5}})}),/*#__PURE__*/_jsx(Item,{name:\"price\",initialValue:this.state.price||'',rules:[{required:true,message:'必须输入商品价格'},{validator:this.validatePrice}],label:\"\\u5546\\u54C1\\u4EF7\\u683C\",children:/*#__PURE__*/_jsx(_Input,{type:\"number\",prefix:\"\\uFFE5\",addonAfter:\"\\u5143\",placeholder:\"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u4EF7\\u683C\"})}),/*#__PURE__*/_jsx(Item,{name:\"categoryIds\",initialValue:this.state.categoryId||'',rules:[{required:true,message:'必须指定商品的分类'}],label:\"\\u5546\\u54C1\\u5206\\u7C7B\",children:/*#__PURE__*/_jsxs(_Select,{children:[/*#__PURE__*/_jsx(Option,{value:\"\",children:\"\\u8BF7\\u9009\\u62E9\\u5206\\u7C7B\"}),this.state.categoryList.map(function(item){return/*#__PURE__*/_jsx(Option,{value:item._id,children:item.name},item._id);})]})}),/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u56FE\\u7247\",wrapperCol:{md:12},children:/*#__PURE__*/_jsx(PicturesWall,{ref:\"pictureWall\"/*  imgs={imgs}  */})}),/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u8BE6\\u60C5\",labelCol:{span:2},wrapperCol:{span:20},children:/*#__PURE__*/_jsx(RichTextEditor,{ref:\"editor\"/* detail={detail} */})}),/*#__PURE__*/_jsx(Item,{children:/*#__PURE__*/_jsx(_Button,{onClick:this.submit,type:\"primary\",children:\"\\u63D0\\u4EA4\"})})]}))});}}]);return AddUpdate;}(Component),_temp))||_class);export default AddUpdate;","map":{"version":3,"sources":["C:/Users/PC/Desktop/源码/react_Project/react-project/src/containers/Product/add_update.jsx"],"names":["React","Component","connect","ArrowLeftOutlined","reqCategoryList","reqAddProduct","reqUpdateProduct","PicturesWall","RichTextEditor","Item","TextArea","Option","AddUpdate","state","categoryList","productList","props","formRef","createRef","operaType","options","name","desc","price","categoryId","detail","imgs","_id","getCategoryList","result","status","data","msg","setState","error","submit","event","preventDefault","refs","pictureWall","getImgArr","editor","getRichText","current","validateFields","then","values","categoryIds","pCategoryId","product1","product2","success","history","replace","catch","errorInfo","console","log","validatePrice","value","Promise","resolve","pw","id","match","params","length","find","item","setFileList","setRichText","layout","labelCol","span","wrapperCol","title","goBack","marginRight","fontSize","required","message","des","minRows","maxRows","validator","map","md"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Form, Input, Card, message, /* Cascader, */ Select } from \"antd\"\r\nimport { connect } from 'react-redux'\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport { reqCategoryList, reqAddProduct,reqUpdateProduct } from '../../api'\r\nimport PicturesWall from './picture_wall'\r\nimport RichTextEditor from './rich-text-editor'\r\n\r\n\r\n//数据验证的两种方式:1、form.UseForm 2、formRef = React.createRef();\r\nconst { Item } = Form\r\nconst { TextArea } = Input\r\nconst { Option } = Select\r\n\r\n@connect(\r\n    state => ({\r\n        categoryList: state.categoryList,\r\n        productList: state.productList\r\n    }),\r\n    {}\r\n)\r\nclass AddUpdate extends Component {\r\n    formRef = React.createRef();\r\n\r\n    state = {\r\n        categoryList: [],\r\n        operaType: 'add',\r\n        options: [],\r\n        name: '',\r\n        desc: '',\r\n        price: '',\r\n        categoryId: '',\r\n        detail: '',\r\n        imgs: '',\r\n        _id: ''\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        // 创建用来保存ref标识的标签对象的容器\r\n        this.pw = React.createRef()\r\n        this.editor = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { categoryList, productList } = this.props\r\n        const { id } = this.props.match.params\r\n        // console.log(id);\r\n        if (categoryList.length) this.setState({ categoryList })\r\n        else this.getCategoryList()\r\n        if (id) {\r\n            this.setState({ operaType: 'update' })\r\n            if (productList.length) {\r\n                let result = productList.find((item) => {\r\n                    // console.log(item);\r\n                    return item._id === id\r\n                })\r\n                if (result) {\r\n                    // console.log(result);\r\n                    console.log(result.name);\r\n                    this.setState({ ...result })\r\n                    this.refs.pictureWall.setFileList(result.imgs)\r\n                    this.refs.editor.setRichText(result.detail)\r\n                }\r\n            }/* else{\r\n                this.getProductList()\r\n            } */\r\n        }\r\n    }\r\n\r\n    /* getProductList = async()=>{\r\n        let result = await reqProdById()\r\n        const {status,data,msg} = result\r\n        if(status === 0){\r\n            message.success('hh')\r\n            this.setstate({...data})\r\n            this.refs.pictureWall.setFileList(result.imgs)\r\n            this.refs.editor.setRichText(result.detail)\r\n        }else{\r\n            message/error(msg)\r\n        }\r\n    } */\r\n\r\n    getCategoryList = async () => {\r\n        let result = await reqCategoryList()\r\n        const { status, data, msg } = result\r\n        if (status === 0) this.setState({ categoryList: data })\r\n        else message.error(msg)\r\n    }\r\n\r\n    submit = (event) => { \r\n        event.preventDefault()\r\n        //从上传组件中获取已经上传的图片数组\r\n        let imgs = this.refs.pictureWall.getImgArr();\r\n        // console.log(imgs);\r\n        //从富文本组件中获取用户输入的文字转换为富文本的字符串\r\n        let detail = this.refs.editor.getRichText()\r\n        // console.log(detail);\r\n        // 进行表单验证 通过才发送请求\r\n        this.formRef.current.validateFields()\r\n            .then(async values => {\r\n                const { name, desc, price, categoryIds } = values\r\n                // 1、收集数据\r\n                let categoryId = categoryIds\r\n                let pCategoryId = categoryIds\r\n                const {operaType,_id} = this.state\r\n                const product1 = { name, desc, price, categoryIds, imgs, detail, categoryId, pCategoryId }\r\n                const product2 = { name, desc, price, categoryIds, imgs, detail, categoryId, pCategoryId,_id }\r\n                // console.log(product);\r\n                let result \r\n                if(operaType === 'add'){\r\n                    result = await reqAddProduct(product1)\r\n                }else{\r\n                    result = await reqUpdateProduct(product2)\r\n                }\r\n\r\n                // console.log(result);\r\n                const { status, msg } = result\r\n                if (status === 0) {\r\n                    message.success('操作成功')\r\n                    this.props.history.replace('/Admin/prod_about/Product')\r\n                } else {\r\n                    message.error(msg)\r\n                }\r\n            })\r\n            .catch(errorInfo => { console.log(\"哈哈\"); })\r\n    }\r\n\r\n    //   // 更新options数组\r\n    //   initOptions = async (categorys) => {\r\n    //     // 根据categorys 生成options数组\r\n    //     const options = categorys.map(c => ({\r\n    //       value: c._id,\r\n    //       label: c.name,\r\n    //       isLeaf: false,  //不是叶子 即还有其他子集分类\r\n    //     }))\r\n\r\n    //     // 如果是一个二级分类商品的更新\r\n    //     const {isUpdate,product} = this\r\n    //     const {pCategoryId} = product\r\n    //     if (isUpdate && pCategoryId !== '0') {\r\n    //       // 获取相应的二级分类列表\r\n    //       const subCategorys = await this.getCategorys(pCategoryId)\r\n    //       // 生成二级下拉列表的options\r\n    //       const childOptions = subCategorys.map(c=>({\r\n    //         value: c._id,\r\n    //         label: c.name,\r\n    //         isLeaf: true,\r\n    //       }))\r\n    //       // 找到当前商品相应的一级option对象\r\n    //       const targetOption = options.find(option => option.value === pCategoryId)\r\n    //       // 关联到对应的一级option上\r\n    //       targetOption.children = childOptions\r\n    //     }\r\n\r\n    //     // 更新options状态\r\n    //     this.setState({options})\r\n    //   }\r\n\r\n\r\n    //   // 用于异步获取一级/二级分类列表 并且显示\r\n    //   // async函数的返回值就是一个新的promise对象 promise的结果和值由async的结果决定\r\n\r\n    //   getCategorys = async (parentId) => {\r\n    //     const result = await reqCategorys(parentId)\r\n    //     if (result.status === 0) {\r\n    //       const categorys = result.data\r\n    //       // 判断 一级列表还是二级列表\r\n    //       if (parentId === '0') {\r\n    //         this.initOptions(categorys)\r\n    //       } else {\r\n    //         // 二级列表\r\n    //         // 返回二级列表 ===> 当前async函数返回的promise就会成功且value为categorys\r\n    //         return categorys\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    // 定义验证价格的函数\r\n    validatePrice = (value) => {\r\n        // console.log(value);\r\n        if (value) {\r\n            if (value * 1 >= 0) {\r\n                return Promise.resolve()\r\n            } else {\r\n                return Promise.resolve()/* reject('价格必须要大于0！') */\r\n            }\r\n        } else {\r\n            return Promise.resolve()\r\n        }\r\n    }\r\n\r\n    //   // 用于加载下一级列表的回调函数\r\n    //   loadData = async selectedOptions => {\r\n    //     // 得到点击的列表项 即option对象\r\n    //     const targetOption = selectedOptions[0]\r\n    //     // 显示loading效果\r\n    //     targetOption.loading = true\r\n\r\n    //     // 根据选中的分类 请求获取二级分类列表\r\n    //     const subCategorys = await this.getCategorys(targetOption.value)\r\n    //     // 隐藏loading\r\n    //     targetOption.loading = false\r\n\r\n    //     if (subCategorys && subCategorys.length > 0) {\r\n    //       // 说明现在存在二级分类\r\n    //       // 生成一个二级列表的options单\r\n    //       const cOptions = subCategorys.map(c=>({\r\n    //         value: c._id,\r\n    //         label: c.name,\r\n    //         isLeaf: true,  \r\n    //       }))\r\n    //       // 关联到当前的target.option身上 ===> children\r\n    //       targetOption.children = cOptions\r\n    //     } else {\r\n    //       // 当前选中的列表项没有二级分类\r\n    //       targetOption.isLeaf = true \r\n    //     }\r\n\r\n    //       // 更新options状态\r\n    //       this.setState({\r\n    //         options: [...this.state.options],\r\n    //       })\r\n    //   }\r\n\r\n    //   submit =  () => {\r\n    //     // 进行表单验证 通过才发送请求\r\n    //     this.formRef.current.validateFields()\r\n    //     .then( async values => {\r\n\r\n    //       // 1、收集数据\r\n    //       // console.log('values',values);\r\n    //       const {name,desc,price,categoryIds} = values\r\n    //       let pCategoryId,categoryId\r\n    //       if (categoryIds.length === 1) {\r\n    //         pCategoryId = '0'\r\n    //         categoryId = categoryIds[0]\r\n    //       } else {\r\n    //         pCategoryId = categoryIds[0]\r\n    //         categoryId = categoryIds[1]\r\n    //       }\r\n    //       const imgs= this.pw.current.getImgs()\r\n    //       const detail = this.editor.current.getDetail()\r\n\r\n    //       // 封装成product对象\r\n    //       const product = {name,desc,price,imgs,detail}\r\n    //       console.log('product',product);\r\n\r\n    //       /* // 如果是更新需要添加_id\r\n    //       if (this.isUpdate) {\r\n    //         product._id = this.product._id\r\n    //       }\r\n\r\n    //       // 2、调用接口请求函数去添加/更新\r\n    //       const result = await reqAddOrUpdateProduct(product)\r\n    //       console.log(result);\r\n    //       // 3、根据结果显示\r\n    //       if (result.status === 0) {\r\n    //         message.success(`${this.isUpdate ? '更新':'添加'}商品成功！`)\r\n    //         this.props.history.goBack()\r\n    //       } else {\r\n    //         message.error(`${this.isUpdate ? '更新':'添加'}商品失败！`)\r\n    //       } */\r\n\r\n    //       let result\r\n    //       // 如果是更新需要添加_id\r\n    //       if (this.isUpdate) {\r\n    //         product._id = this.product._id\r\n    //         result = await reaUpdateProduct(product)\r\n    //         if (result.status === 0) {\r\n    //           message.success(` 更新商品成功！`)\r\n    //           this.props.history.goBack()\r\n    //         } else {\r\n    //           message.error(`更新商品失败！`)\r\n    //         }\r\n    //       } else {\r\n    //         result = await reqAddProduct(product)\r\n    //         // console.log('添加',result);   result.status===1\r\n    //         if (result.status === 0) {\r\n    //           message.success(` 添加商品成功！`)\r\n    //           this.props.history.goBack()\r\n    //         } else {\r\n    //           message.error(`添加商品失败！`)\r\n    //         }\r\n    //       }\r\n\r\n\r\n\r\n\r\n    //       // alert('提交请求成功')\r\n    //       // console.log('submitvalue',values);\r\n    //       // console.log('submit', this.pw.current.getImgs());\r\n    //       // const imgs= this.pw.current.getImgs()\r\n    //       // const detail = this.editor.current.getDetail()\r\n    //       // console.log('submit',imgs,detail);\r\n    //     })\r\n    //     .catch(errInfo => {\r\n    //       console.log('请求提交错误', errInfo);\r\n    //     })\r\n    //   }\r\n\r\n    //   componentDidMount() {\r\n    //     this.getCategorys('0')  //获取一级列表\r\n    //   }\r\n\r\n    //   UNSAFE_componentWillMount(){\r\n    //     // 如果是添加则会没值 否则有值\r\n    //     const product = this.props.location.state\r\n    //     // 保存是否为更新的标识  \r\n    //     this.isUpdate = !!product  //强制转换为一个布尔值\r\n    //     // 保存商品 若没有 保存一个空对象 则下面设置初始值则不会报错\r\n    //     this.product = product || {}\r\n    //   }\r\n    render() {\r\n        const { operaType } = this.state\r\n        console.log(this.state.name);\r\n        console.log(this.state.price);\r\n        console.log(this.state.detail);\r\n        console.log(this.state.imgs);\r\n        // 指定Item配置对象\r\n        const layout = {\r\n            labelCol: {\r\n                span: 2,   //指定左侧label的宽度\r\n            },\r\n            wrapperCol: {\r\n                span: 8,  //指定右侧包裹的宽度\r\n            },\r\n        }\r\n        /* \r\n              const {isUpdate,product} = this\r\n              const {pCategoryId,categoryId,imgs,detail} = product\r\n              // 用来接收级联分类ID的数组\r\n              const categorys = []\r\n              if (isUpdate) {\r\n                // 商品处于一级分类列表中\r\n                if (pCategoryId === '0') {\r\n                  categorys.push(categoryId)\r\n                } else {\r\n                  // 商品为二级分类\r\n                  categorys.push(pCategoryId)\r\n                  categorys.push(categoryId)\r\n                }\r\n              } */\r\n\r\n        const title = (\r\n            <span>\r\n                <Button type=\"link\" onClick={() => this.props.history.goBack()}>\r\n                    <ArrowLeftOutlined style={{ marginRight: 10, fontSize: 20 }} />\r\n                </Button>\r\n                <span>{operaType ? '修改商品' : '添加商品'}</span>\r\n            </span>\r\n        )\r\n\r\n        return (\r\n            <Card title={title}>\r\n                <Form ref={this.formRef} {...layout}>\r\n                    <Item name='name'\r\n                        initialValue={this.state.name}\r\n                        rules={[\r\n                            { required: true, message: '必须输入商品名称' },\r\n                        ]}\r\n                        label='商品名称'>\r\n                        <Input placeholder='请输入商品名称' />\r\n                    </Item>\r\n                    <Item name='desc'\r\n                        initialValue={this.state.des || ''}\r\n                        rules={[\r\n                            { required: true, message: '必须输入商品描述' },\r\n                        ]} label='商品描述'>\r\n                        <TextArea placeholder='请输入商品描述' autoSize={{ minRows: 2, maxRows: 5 }} />\r\n                    </Item>\r\n                    <Item name='price'\r\n                        initialValue={this.state.price || ''}\r\n                        rules={[\r\n                            { required: true, message: '必须输入商品价格' },\r\n                            { validator: this.validatePrice }\r\n                        ]} label='商品价格'>\r\n                        <Input type='number' prefix=\"￥\" addonAfter='元' placeholder='请输入商品价格' />\r\n                    </Item>\r\n                    <Item name='categoryIds' initialValue={this.state.categoryId || ''} rules={[{ required: true, message: '必须指定商品的分类' },]} label='商品分类'>\r\n                        <Select>\r\n                            <Option value=\"\">请选择分类</Option>\r\n                            {\r\n                                this.state.categoryList.map((item) => {\r\n                                    return <Option key={item._id} value={item._id}>{item.name}</Option>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                        {/* <Cascader\r\n                                        placeholder='请指定商品的分类'\r\n                                    // options={this.state.options}  //需要显示的列表数据数组\r\n                                    // loadData={this.loadData}   //当选择某个列表项 加载下一级列表的回调\r\n                                    /> */}\r\n                    </Item>\r\n                    <Item\r\n                        label='商品图片'\r\n                        wrapperCol={{ md: 12 }}\r\n                    >\r\n                        <PicturesWall ref=\"pictureWall\"  /*  imgs={imgs}  */ />\r\n                    </Item>\r\n                    <Item label='商品详情' labelCol={{ span: 2 }} wrapperCol={{ span: 20 }}>\r\n                        <RichTextEditor ref=\"editor\" /* detail={detail} */ />\r\n                    </Item>\r\n                    <Item>\r\n                        <Button onClick={this.submit} type='primary'>提交</Button>\r\n                    </Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\nexport default AddUpdate"]},"metadata":{},"sourceType":"module"}