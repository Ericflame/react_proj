{"ast":null,"code":"/* import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport {ContentState, convertToRaw, EditorState} from 'draft-js'\r\n// import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\n\r\n// 用来指定商品详情的富文本编程器组件\r\nexport default class RichTextEditor extends Component {\r\n\r\n  static propTypes = {\r\n    detail: PropTypes.string\r\n  }\r\n    state = {\r\n      // 创建一个没有内容的编辑对象\r\n      editorState: EditorState.createEmpty()\r\n    }\r\n\r\n    constructor(props) {\r\n      super(props)\r\n      const html = this.props.detail\r\n      if (html) {  //如果有值创建包含内容的html对象\r\n        const contentBlock = htmlToDraft(html)\r\n        if (contentBlock) {\r\n            const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\r\n            const editorState = EditorState.createWithContent(contentState)\r\n            this.state = {\r\n              editorState,\r\n            }\r\n          }\r\n        } else {\r\n          this.state = {\r\n          editorState: EditorState.createEmpty()\r\n        }\r\n      } \r\n    }\r\n      \r\n\r\n\r\n    // 输入过程中实时的回调\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({editorState})\r\n    }\r\n\r\n    getDetail = () => {\r\n      // 返回输入数据对应的html格式的文本\r\n      return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\r\n    }\r\n\r\n    uploadImageCallback = (file) => {\r\n      return new Promise(\r\n        (resolve,reject) => {\r\n          const xhr = new XMLHttpRequest()\r\n          xhr.open('POST','/manage/img/upload')\r\n          const data = new FormData()\r\n          data.append('image',file)\r\n          xhr.send(data)\r\n          xhr.addEventListener('load',()=>{\r\n            const response = JSON.parse(xhr.responseText)\r\n            const url = response.data.url  //得到图片的url\r\n            resolve({data:{link:url}})\r\n          })\r\n          xhr.addEventListener('load',()=>{\r\n            const error = JSON.parse(xhr.responseText)\r\n            reject(error)\r\n          })\r\n        }\r\n      )\r\n    }\r\n\r\n    render() {\r\n        const {editorState} = this.state\r\n        return (\r\n              <Editor\r\n                editorState={editorState}\r\n                editorStyle={{border: '1px solid #ddd', minHeight: 200, paddingLeft: 10}}\r\n                onEditorStateChange={this.onEditorStateChange}\r\n                toolbar={{\r\n                  image: {uploadCallback: this.uploadImageCallback,alt: {present: true, mandatory: true}}\r\n                }}\r\n              />\r\n        )\r\n    }\r\n}\r\n */","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/src/containers/Product/rich-text-editor.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport {ContentState, convertToRaw, EditorState} from 'draft-js'\r\n// import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\n\r\n// 用来指定商品详情的富文本编程器组件\r\nexport default class RichTextEditor extends Component {\r\n\r\n  static propTypes = {\r\n    detail: PropTypes.string\r\n  }\r\n    state = {\r\n      // 创建一个没有内容的编辑对象\r\n      editorState: EditorState.createEmpty()\r\n    }\r\n\r\n    constructor(props) {\r\n      super(props)\r\n      const html = this.props.detail\r\n      if (html) {  //如果有值创建包含内容的html对象\r\n        const contentBlock = htmlToDraft(html)\r\n        if (contentBlock) {\r\n            const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\r\n            const editorState = EditorState.createWithContent(contentState)\r\n            this.state = {\r\n              editorState,\r\n            }\r\n          }\r\n        } else {\r\n          this.state = {\r\n          editorState: EditorState.createEmpty()\r\n        }\r\n      } \r\n    }\r\n      \r\n\r\n\r\n    // 输入过程中实时的回调\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({editorState})\r\n    }\r\n\r\n    getDetail = () => {\r\n      // 返回输入数据对应的html格式的文本\r\n      return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\r\n    }\r\n\r\n    uploadImageCallback = (file) => {\r\n      return new Promise(\r\n        (resolve,reject) => {\r\n          const xhr = new XMLHttpRequest()\r\n          xhr.open('POST','/manage/img/upload')\r\n          const data = new FormData()\r\n          data.append('image',file)\r\n          xhr.send(data)\r\n          xhr.addEventListener('load',()=>{\r\n            const response = JSON.parse(xhr.responseText)\r\n            const url = response.data.url  //得到图片的url\r\n            resolve({data:{link:url}})\r\n          })\r\n          xhr.addEventListener('load',()=>{\r\n            const error = JSON.parse(xhr.responseText)\r\n            reject(error)\r\n          })\r\n        }\r\n      )\r\n    }\r\n\r\n    render() {\r\n        const {editorState} = this.state\r\n        return (\r\n              <Editor\r\n                editorState={editorState}\r\n                editorStyle={{border: '1px solid #ddd', minHeight: 200, paddingLeft: 10}}\r\n                onEditorStateChange={this.onEditorStateChange}\r\n                toolbar={{\r\n                  image: {uploadCallback: this.uploadImageCallback,alt: {present: true, mandatory: true}}\r\n                }}\r\n              />\r\n        )\r\n    }\r\n}\r\n */"]},"metadata":{},"sourceType":"module"}