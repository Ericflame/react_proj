{"ast":null,"code":"import \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/cascader/style\";\nimport _Cascader from \"antd/es/cascader\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\react-project\\\\src\\\\containers\\\\Product\\\\add_update.jsx\";\nimport React, { Component } from 'react';\nimport { ArrowLeftOutlined } from '@ant-design/icons';\nimport PicturesWall from './pictures-wall';\nimport RichTextEditor from './rich-text-editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Item\n} = _Form;\nconst {\n  TextArea\n} = _Input;\nexport default class AddUpdate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.formRef = /*#__PURE__*/React.createRef();\n  }\n\n  //   state = {\n  //     options: [],\n  //   }\n  //   constructor(props) {\n  //     super(props)\n  //     // 创建用来保存ref标识的标签对象的容器\n  //     this.pw = React.createRef()\n  //     this.editor = React.createRef()\n  //   }\n  //   // 更新options数组\n  //   initOptions = async (categorys) => {\n  //     // 根据categorys 生成options数组\n  //     const options = categorys.map(c => ({\n  //       value: c._id,\n  //       label: c.name,\n  //       isLeaf: false,  //不是叶子 即还有其他子集分类\n  //     }))\n  //     // 如果是一个二级分类商品的更新\n  //     const {isUpdate,product} = this\n  //     const {pCategoryId} = product\n  //     if (isUpdate && pCategoryId !== '0') {\n  //       // 获取相应的二级分类列表\n  //       const subCategorys = await this.getCategorys(pCategoryId)\n  //       // 生成二级下拉列表的options\n  //       const childOptions = subCategorys.map(c=>({\n  //         value: c._id,\n  //         label: c.name,\n  //         isLeaf: true,\n  //       }))\n  //       // 找到当前商品相应的一级option对象\n  //       const targetOption = options.find(option => option.value === pCategoryId)\n  //       // 关联到对应的一级option上\n  //       targetOption.children = childOptions\n  //     }\n  //     // 更新options状态\n  //     this.setState({options})\n  //   }\n  //   // 用于异步获取一级/二级分类列表 并且显示\n  //   // async函数的返回值就是一个新的promise对象 promise的结果和值由async的结果决定\n  //   getCategorys = async (parentId) => {\n  //     const result = await reqCategorys(parentId)\n  //     if (result.status === 0) {\n  //       const categorys = result.data\n  //       // 判断 一级列表还是二级列表\n  //       if (parentId === '0') {\n  //         this.initOptions(categorys)\n  //       } else {\n  //         // 二级列表\n  //         // 返回二级列表 ===> 当前async函数返回的promise就会成功且value为categorys\n  //         return categorys\n  //       }\n  //     }\n  //   }\n  //   // 定义验证价格的函数\n  //   validatePrice = (rule,value,callback) => {\n  //     if (value * 1 > 0) {\n  //       // callback()  //验证通过\n  //       return Promise.resolve()\n  //     } else {\n  //       // 验证不通过\n  //       // callback('价格必须要大于0！')  会有警告 返回一个promise\n  //       return Promise.reject('价格必须要大于0！')\n  //     }\n  //   }\n  //   // 用于加载下一级列表的回调函数\n  //   loadData = async selectedOptions => {\n  //     // 得到点击的列表项 即option对象\n  //     const targetOption = selectedOptions[0]\n  //     // 显示loading效果\n  //     targetOption.loading = true\n  //     // 根据选中的分类 请求获取二级分类列表\n  //     const subCategorys = await this.getCategorys(targetOption.value)\n  //     // 隐藏loading\n  //     targetOption.loading = false\n  //     if (subCategorys && subCategorys.length > 0) {\n  //       // 说明现在存在二级分类\n  //       // 生成一个二级列表的options单\n  //       const cOptions = subCategorys.map(c=>({\n  //         value: c._id,\n  //         label: c.name,\n  //         isLeaf: true,  \n  //       }))\n  //       // 关联到当前的target.option身上 ===> children\n  //       targetOption.children = cOptions\n  //     } else {\n  //       // 当前选中的列表项没有二级分类\n  //       targetOption.isLeaf = true \n  //     }\n  //       // 更新options状态\n  //       this.setState({\n  //         options: [...this.state.options],\n  //       })\n  //   }\n  //   submit =  () => {\n  //     // 进行表单验证 通过才发送请求\n  //     this.formRef.current.validateFields()\n  //     .then( async values => {\n  //       // 1、收集数据\n  //       // console.log('values',values);\n  //       const {name,desc,price,categoryIds} = values\n  //       let pCategoryId,categoryId\n  //       if (categoryIds.length === 1) {\n  //         pCategoryId = '0'\n  //         categoryId = categoryIds[0]\n  //       } else {\n  //         pCategoryId = categoryIds[0]\n  //         categoryId = categoryIds[1]\n  //       }\n  //       const imgs= this.pw.current.getImgs()\n  //       const detail = this.editor.current.getDetail()\n  //       // 封装成product对象\n  //       const product = {name,desc,price,imgs,detail}\n  //       console.log('product',product);\n  //       /* // 如果是更新需要添加_id\n  //       if (this.isUpdate) {\n  //         product._id = this.product._id\n  //       }\n  //       // 2、调用接口请求函数去添加/更新\n  //       const result = await reqAddOrUpdateProduct(product)\n  //       console.log(result);\n  //       // 3、根据结果显示\n  //       if (result.status === 0) {\n  //         message.success(`${this.isUpdate ? '更新':'添加'}商品成功！`)\n  //         this.props.history.goBack()\n  //       } else {\n  //         message.error(`${this.isUpdate ? '更新':'添加'}商品失败！`)\n  //       } */\n  //       let result\n  //       // 如果是更新需要添加_id\n  //       if (this.isUpdate) {\n  //         product._id = this.product._id\n  //         result = await reaUpdateProduct(product)\n  //         if (result.status === 0) {\n  //           message.success(` 更新商品成功！`)\n  //           this.props.history.goBack()\n  //         } else {\n  //           message.error(`更新商品失败！`)\n  //         }\n  //       } else {\n  //         result = await reqAddProduct(product)\n  //         // console.log('添加',result);   result.status===1\n  //         if (result.status === 0) {\n  //           message.success(` 添加商品成功！`)\n  //           this.props.history.goBack()\n  //         } else {\n  //           message.error(`添加商品失败！`)\n  //         }\n  //       }\n  //       // alert('提交请求成功')\n  //       // console.log('submitvalue',values);\n  //       // console.log('submit', this.pw.current.getImgs());\n  //       // const imgs= this.pw.current.getImgs()\n  //       // const detail = this.editor.current.getDetail()\n  //       // console.log('submit',imgs,detail);\n  //     })\n  //     .catch(errInfo => {\n  //       console.log('请求提交错误', errInfo);\n  //     })\n  //   }\n  //   componentDidMount() {\n  //     this.getCategorys('0')  //获取一级列表\n  //   }\n  //   UNSAFE_componentWillMount(){\n  //     // 如果是添加则会没值 否则有值\n  //     const product = this.props.location.state\n  //     // 保存是否为更新的标识  \n  //     this.isUpdate = !!product  //强制转换为一个布尔值\n  //     // 保存商品 若没有 保存一个空对象 则下面设置初始值则不会报错\n  //     this.product = product || {}\n  //   }\n  render() {\n    // 指定Item配置对象\n    const layout = {\n      labelCol: {\n        span: 2 //指定左侧label的宽度\n\n      },\n      wrapperCol: {\n        span: 8 //指定右侧包裹的宽度\n\n      }\n    };\n    /* \r\n          const {isUpdate,product} = this\r\n          const {pCategoryId,categoryId,imgs,detail} = product\r\n          // 用来接收级联分类ID的数组\r\n          const categorys = []\r\n          if (isUpdate) {\r\n            // 商品处于一级分类列表中\r\n            if (pCategoryId === '0') {\r\n              categorys.push(categoryId)\r\n            } else {\r\n              // 商品为二级分类\r\n              categorys.push(pCategoryId)\r\n              categorys.push(categoryId)\r\n            }\r\n          } */\n\n    const title = /*#__PURE__*/_jsxDEV(\"span\", {\n      children: /*#__PURE__*/_jsxDEV(_Button, {\n        type: \"link\",\n        onClick: () => this.props.history.goBack(),\n        children: /*#__PURE__*/_jsxDEV(ArrowLeftOutlined, {\n          style: {\n            marginRight: 10,\n            fontSize: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(_Card, {\n      title: title,\n      children: /*#__PURE__*/_jsxDEV(_Form, {\n        ref: this.formRef,\n        ...layout,\n        children: [/*#__PURE__*/_jsxDEV(Item\n        /* name='name' */\n        , {\n          rules: [{\n            required: true,\n            message: '必须输入商品名称'\n          }]\n          /* initialValue={product.name} */\n          ,\n          label: \"\\u5546\\u54C1\\u540D\\u79F0\",\n          children: /*#__PURE__*/_jsxDEV(_Input, {\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u540D\\u79F0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item\n        /* name='desc' */\n\n        /* initialValue={product.desc} */\n        , {\n          rules: [{\n            required: true,\n            message: '必须输入商品描述'\n          }],\n          label: \"\\u5546\\u54C1\\u63CF\\u8FF0\",\n          children: /*#__PURE__*/_jsxDEV(TextArea, {\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u63CF\\u8FF0\",\n            autoSize: {\n              minRows: 2,\n              maxRows: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item\n        /* name='price' */\n\n        /* initialValue={product.price} */\n        , {\n          rules: [{\n            required: true,\n            message: '必须输入商品价格'\n          }\n          /* { validator: this.validatePrice } */\n          ],\n          label: \"\\u5546\\u54C1\\u4EF7\\u683C\",\n          children: /*#__PURE__*/_jsxDEV(_Input, {\n            type: \"number\",\n            prefix: \"\\uFFE5\",\n            addonAfter: \"\\u5143\",\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u4EF7\\u683C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item\n        /* name='categoryIds' */\n\n        /* initialValue={categorys} */\n        , {\n          rules: [{\n            required: true,\n            message: '必须指定商品的分类'\n          }],\n          label: \"\\u5546\\u54C1\\u5206\\u7C7B\",\n          children: /*#__PURE__*/_jsxDEV(_Cascader, {\n            placeholder: \"\\u8BF7\\u6307\\u5B9A\\u5546\\u54C1\\u7684\\u5206\\u7C7B\" // options={this.state.options}  //需要显示的列表数据数组\n            // loadData={this.loadData}   //当选择某个列表项 加载下一级列表的回调\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u56FE\\u7247\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u8BE6\\u60C5\",\n          labelCol: {\n            span: 2\n          },\n          wrapperCol: {\n            span: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          children: /*#__PURE__*/_jsxDEV(_Button, {\n            onClick: this.submit,\n            type: \"primary\",\n            children: \"\\u63D0\\u4EA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/src/containers/Product/add_update.jsx"],"names":["React","Component","ArrowLeftOutlined","PicturesWall","RichTextEditor","Item","TextArea","AddUpdate","formRef","createRef","render","layout","labelCol","span","wrapperCol","title","props","history","goBack","marginRight","fontSize","required","message","minRows","maxRows","submit"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,SAAN;AACA,MAAM;AAAEC,EAAAA;AAAF,UAAN;AACA,eAAe,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAAA;AAAA;AAAA,SACzCO,OADyC,gBAC/BR,KAAK,CAACS,SAAN,EAD+B;AAAA;;AAG7C;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,GAAG;AAEL;AACA,UAAMC,MA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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Form, Input, Card, message, Cascader, } from \"antd\"\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport PicturesWall from './pictures-wall'\r\nimport RichTextEditor from './rich-text-editor'\r\n\r\nconst { Item } = Form\r\nconst { TextArea } = Input\r\nexport default class AddUpdate extends Component {\r\n        formRef = React.createRef();\r\n\r\n    //   state = {\r\n    //     options: [],\r\n    //   }\r\n\r\n    //   constructor(props) {\r\n    //     super(props)\r\n    //     // 创建用来保存ref标识的标签对象的容器\r\n    //     this.pw = React.createRef()\r\n    //     this.editor = React.createRef()\r\n    //   }\r\n\r\n    //   // 更新options数组\r\n    //   initOptions = async (categorys) => {\r\n    //     // 根据categorys 生成options数组\r\n    //     const options = categorys.map(c => ({\r\n    //       value: c._id,\r\n    //       label: c.name,\r\n    //       isLeaf: false,  //不是叶子 即还有其他子集分类\r\n    //     }))\r\n\r\n    //     // 如果是一个二级分类商品的更新\r\n    //     const {isUpdate,product} = this\r\n    //     const {pCategoryId} = product\r\n    //     if (isUpdate && pCategoryId !== '0') {\r\n    //       // 获取相应的二级分类列表\r\n    //       const subCategorys = await this.getCategorys(pCategoryId)\r\n    //       // 生成二级下拉列表的options\r\n    //       const childOptions = subCategorys.map(c=>({\r\n    //         value: c._id,\r\n    //         label: c.name,\r\n    //         isLeaf: true,\r\n    //       }))\r\n    //       // 找到当前商品相应的一级option对象\r\n    //       const targetOption = options.find(option => option.value === pCategoryId)\r\n    //       // 关联到对应的一级option上\r\n    //       targetOption.children = childOptions\r\n    //     }\r\n\r\n    //     // 更新options状态\r\n    //     this.setState({options})\r\n    //   }\r\n\r\n\r\n    //   // 用于异步获取一级/二级分类列表 并且显示\r\n    //   // async函数的返回值就是一个新的promise对象 promise的结果和值由async的结果决定\r\n\r\n    //   getCategorys = async (parentId) => {\r\n    //     const result = await reqCategorys(parentId)\r\n    //     if (result.status === 0) {\r\n    //       const categorys = result.data\r\n    //       // 判断 一级列表还是二级列表\r\n    //       if (parentId === '0') {\r\n    //         this.initOptions(categorys)\r\n    //       } else {\r\n    //         // 二级列表\r\n    //         // 返回二级列表 ===> 当前async函数返回的promise就会成功且value为categorys\r\n    //         return categorys\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    //   // 定义验证价格的函数\r\n    //   validatePrice = (rule,value,callback) => {\r\n    //     if (value * 1 > 0) {\r\n    //       // callback()  //验证通过\r\n    //       return Promise.resolve()\r\n    //     } else {\r\n    //       // 验证不通过\r\n    //       // callback('价格必须要大于0！')  会有警告 返回一个promise\r\n    //       return Promise.reject('价格必须要大于0！')\r\n    //     }\r\n    //   }\r\n\r\n    //   // 用于加载下一级列表的回调函数\r\n    //   loadData = async selectedOptions => {\r\n    //     // 得到点击的列表项 即option对象\r\n    //     const targetOption = selectedOptions[0]\r\n    //     // 显示loading效果\r\n    //     targetOption.loading = true\r\n\r\n    //     // 根据选中的分类 请求获取二级分类列表\r\n    //     const subCategorys = await this.getCategorys(targetOption.value)\r\n    //     // 隐藏loading\r\n    //     targetOption.loading = false\r\n\r\n    //     if (subCategorys && subCategorys.length > 0) {\r\n    //       // 说明现在存在二级分类\r\n    //       // 生成一个二级列表的options单\r\n    //       const cOptions = subCategorys.map(c=>({\r\n    //         value: c._id,\r\n    //         label: c.name,\r\n    //         isLeaf: true,  \r\n    //       }))\r\n    //       // 关联到当前的target.option身上 ===> children\r\n    //       targetOption.children = cOptions\r\n    //     } else {\r\n    //       // 当前选中的列表项没有二级分类\r\n    //       targetOption.isLeaf = true \r\n    //     }\r\n\r\n    //       // 更新options状态\r\n    //       this.setState({\r\n    //         options: [...this.state.options],\r\n    //       })\r\n    //   }\r\n\r\n    //   submit =  () => {\r\n    //     // 进行表单验证 通过才发送请求\r\n    //     this.formRef.current.validateFields()\r\n    //     .then( async values => {\r\n\r\n    //       // 1、收集数据\r\n    //       // console.log('values',values);\r\n    //       const {name,desc,price,categoryIds} = values\r\n    //       let pCategoryId,categoryId\r\n    //       if (categoryIds.length === 1) {\r\n    //         pCategoryId = '0'\r\n    //         categoryId = categoryIds[0]\r\n    //       } else {\r\n    //         pCategoryId = categoryIds[0]\r\n    //         categoryId = categoryIds[1]\r\n    //       }\r\n    //       const imgs= this.pw.current.getImgs()\r\n    //       const detail = this.editor.current.getDetail()\r\n\r\n    //       // 封装成product对象\r\n    //       const product = {name,desc,price,imgs,detail}\r\n    //       console.log('product',product);\r\n\r\n    //       /* // 如果是更新需要添加_id\r\n    //       if (this.isUpdate) {\r\n    //         product._id = this.product._id\r\n    //       }\r\n\r\n    //       // 2、调用接口请求函数去添加/更新\r\n    //       const result = await reqAddOrUpdateProduct(product)\r\n    //       console.log(result);\r\n    //       // 3、根据结果显示\r\n    //       if (result.status === 0) {\r\n    //         message.success(`${this.isUpdate ? '更新':'添加'}商品成功！`)\r\n    //         this.props.history.goBack()\r\n    //       } else {\r\n    //         message.error(`${this.isUpdate ? '更新':'添加'}商品失败！`)\r\n    //       } */\r\n\r\n    //       let result\r\n    //       // 如果是更新需要添加_id\r\n    //       if (this.isUpdate) {\r\n    //         product._id = this.product._id\r\n    //         result = await reaUpdateProduct(product)\r\n    //         if (result.status === 0) {\r\n    //           message.success(` 更新商品成功！`)\r\n    //           this.props.history.goBack()\r\n    //         } else {\r\n    //           message.error(`更新商品失败！`)\r\n    //         }\r\n    //       } else {\r\n    //         result = await reqAddProduct(product)\r\n    //         // console.log('添加',result);   result.status===1\r\n    //         if (result.status === 0) {\r\n    //           message.success(` 添加商品成功！`)\r\n    //           this.props.history.goBack()\r\n    //         } else {\r\n    //           message.error(`添加商品失败！`)\r\n    //         }\r\n    //       }\r\n\r\n\r\n\r\n\r\n    //       // alert('提交请求成功')\r\n    //       // console.log('submitvalue',values);\r\n    //       // console.log('submit', this.pw.current.getImgs());\r\n    //       // const imgs= this.pw.current.getImgs()\r\n    //       // const detail = this.editor.current.getDetail()\r\n    //       // console.log('submit',imgs,detail);\r\n    //     })\r\n    //     .catch(errInfo => {\r\n    //       console.log('请求提交错误', errInfo);\r\n    //     })\r\n    //   }\r\n\r\n    //   componentDidMount() {\r\n    //     this.getCategorys('0')  //获取一级列表\r\n    //   }\r\n\r\n    //   UNSAFE_componentWillMount(){\r\n    //     // 如果是添加则会没值 否则有值\r\n    //     const product = this.props.location.state\r\n    //     // 保存是否为更新的标识  \r\n    //     this.isUpdate = !!product  //强制转换为一个布尔值\r\n    //     // 保存商品 若没有 保存一个空对象 则下面设置初始值则不会报错\r\n    //     this.product = product || {}\r\n    //   }\r\n    render() {\r\n\r\n        // 指定Item配置对象\r\n        const layout = {\r\n            labelCol: {\r\n                span: 2,   //指定左侧label的宽度\r\n            },\r\n            wrapperCol: {\r\n                span: 8,  //指定右侧包裹的宽度\r\n            },\r\n        }\r\n        /* \r\n              const {isUpdate,product} = this\r\n              const {pCategoryId,categoryId,imgs,detail} = product\r\n              // 用来接收级联分类ID的数组\r\n              const categorys = []\r\n              if (isUpdate) {\r\n                // 商品处于一级分类列表中\r\n                if (pCategoryId === '0') {\r\n                  categorys.push(categoryId)\r\n                } else {\r\n                  // 商品为二级分类\r\n                  categorys.push(pCategoryId)\r\n                  categorys.push(categoryId)\r\n                }\r\n              } */\r\n\r\n        const title = (\r\n            <span>\r\n                <Button type=\"link\" onClick={() => this.props.history.goBack()}>\r\n                    <ArrowLeftOutlined style={{ marginRight: 10, fontSize: 20 }} />\r\n                </Button>\r\n                {/* <span>{isUpdate ? '修改商品' : '添加商品'}</span> */}\r\n            </span>\r\n        )\r\n\r\n        return (\r\n            <Card title={title}>\r\n                <Form ref={this.formRef} {...layout}>\r\n                    <Item /* name='name' */\r\n                        rules={[\r\n                            { required: true, message: '必须输入商品名称' },\r\n                        ]}\r\n                        /* initialValue={product.name} */ label='商品名称'>\r\n                        <Input placeholder='请输入商品名称' />\r\n                    </Item>\r\n                    <Item /* name='desc' */ /* initialValue={product.desc} */ rules={[\r\n                        { required: true, message: '必须输入商品描述' },\r\n                    ]} label='商品描述'>\r\n                        <TextArea placeholder='请输入商品描述' autoSize={{ minRows: 2, maxRows: 5 }} />\r\n                    </Item>\r\n                    <Item /* name='price' */ /* initialValue={product.price} */ rules={[\r\n                        { required: true, message: '必须输入商品价格' },\r\n                        /* { validator: this.validatePrice } */\r\n                    ]} label='商品价格'>\r\n                        <Input type='number' prefix=\"￥\" addonAfter='元' placeholder='请输入商品价格' />\r\n                    </Item>\r\n                    <Item /* name='categoryIds' */ /* initialValue={categorys} */ rules={[{ required: true, message: '必须指定商品的分类' },]} label='商品分类'>\r\n                        <Cascader\r\n                            placeholder='请指定商品的分类'\r\n                            // options={this.state.options}  //需要显示的列表数据数组\r\n                            // loadData={this.loadData}   //当选择某个列表项 加载下一级列表的回调\r\n                        />\r\n                    </Item>\r\n                    <Item label='商品图片'>\r\n                        {/* <PicturesWall ref={this.pw} imgs={imgs} /> */}\r\n                    </Item>\r\n                    <Item label='商品详情' labelCol={{ span: 2 }} wrapperCol={{ span: 20 }}>\r\n                        {/* <RichTextEditor ref={this.editor} detail={detail} /> */}\r\n                    </Item>\r\n                    <Item>\r\n                        <Button onClick={this.submit} type='primary'>提交</Button>\r\n                    </Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}