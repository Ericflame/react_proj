{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\n\n/* \r\n要求： 能够根据接口文档定义接口请求\r\n包含应用中所有接口请求函数的模块\r\n  每个函数的返回值都是promise\r\n\r\n  基本要求：能够根据接口文档定义接口请求函数\r\n*/\nimport ajax from './ajax';\nimport jsonp from 'jsonp';\nconst BASE = ''; // 登录接口\n\n/* export function reqLogin(username,password) {\r\n  return ajax('/login',{username,password},'POST')\r\n} */\n\nexport const reqLogin = (username, password) => ajax(BASE + '/login', {\n  username,\n  password\n}, 'POST'); // 添加新用户\n// export const reqAddUser = (user) => ajax(BASE + '/manage/user/add',user,'POST')\n// jsonp请求的接口请请求函数  获取天气查询的接口\n\nexport const reqWeather = cityCode => {\n  return new Promise((resolve, reject) => {\n    const url = `https://restapi.amap.com/v3/weather/weatherInfo?city=${cityCode}&key=36cc4d40112f012a9568e75cd1d8332e`; // 发送jsonp请求\n\n    jsonp(url, {}, (err, data) => {\n      // console.log(err,data);\n      // 如果成功了\n      if (!err && data.status === '1') {\n        const {\n          weather\n        } = data.lives[0]; // console.log(weather);\n\n        resolve(weather);\n      } else {\n        // 如果失败了\n        _message.error('获取天气信息失败...');\n      }\n    });\n  });\n}; // reqWeather(110101)\n// 获取一级/二级分类的列表\n\nexport const reqCategorys = parentId => ajax(BASE + '/manage/category/list', {\n  parentId\n}); // 添加分类\n\nexport const reqAddCategorys = (categoryName, parentId) => ajax(BASE + '/manage/category/add', {\n  categoryName,\n  parentId\n}, 'POST'); // 更新分类\n\nexport const reqUpdateCategorys = ({\n  categoryId,\n  categoryName\n}) => ajax(BASE + '/manage/category/update', {\n  categoryName,\n  categoryId\n}, 'POST'); // 获取商品分页列表\n\nexport const reqProducts = (pageNum, pageSize) => ajax(BASE + '/manage/product/list', {\n  pageNum,\n  pageSize\n}); // 搜索商品分页列表 (根据商品名称 / 商品描述)\n// searchType: 搜索的类型, productName/productDesc\n\nexport const reqSearchProducts = ({\n  pageNum,\n  pageSize,\n  searchName,\n  searchType\n}) => ajax(BASE + '/manage/product/search', {\n  pageNum,\n  pageSize,\n  // 将一个变量的值变成属性名 就要加[]\n  [searchType]: searchName\n}); // 搜索商品分页列表 (根据商品描述)\n// export const reqSearchProducts2 = ({pageNum,pageSize,searchName}) => ajax(BASE+'/manage/product/search',{\n//   pageNum,pageSize,productDesc: searchName\n// })\n// 获取一个分类\n\nexport const reqCategory = categoryId => ajax(BASE + '/manage/category/info', {\n  categoryId\n}); // 更新商品的状态(上架或下架)\n\nexport const reqUpdateStatus = (productId, status) => ajax(BASE + '/manage/product/updateStatus', {\n  productId,\n  status\n}, 'POST'); // 删除指定名称图片的接口\n\nexport const reqDeleteImg = name => ajax(BASE + '/manage/img/delete', {\n  name\n}, 'POST'); // 添加或者修改商品\n// export const reqAddOrUpdateProduct = (product) => ajax(BASE + '/manage/product/' + (product._id ? 'update':'add') ,product,'POST')\n// debugger\n\nexport const reqAddProduct = product => ajax(BASE + '/manage/product/add', product, 'POST'); // 修改商品\n\nexport const reaUpdateProduct = product => ajax(BASE + '/manage/product/update', product, 'POST'); // 获取所有角色的列表\n\nexport const reqRoles = () => ajax(BASE + '/manage/role/list'); // 添加角色\n\nexport const reqAddRole = roleName => ajax(BASE + '/manage/role/add', {\n  roleName\n}, 'POST'); // 更新角色\n\nexport const reqUpdateRole = role => ajax(BASE + '/manage/role/update', role, 'POST'); // 获取所有用户的列表\n\nexport const reqUsers = () => ajax(BASE + '/manage/user/list'); // 删除指定用户\n\nexport const reqDeleteUser = userId => ajax(BASE + '/manage/user/delete', {\n  userId\n}, 'POST'); //添加/更新用户\n\nexport const reqAddOrUpdateUser = user => ajax(BASE + '/manage/user/' + (user._id ? 'update' : 'add'), user, 'POST');","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/src/api/index.js"],"names":["ajax","jsonp","BASE","reqLogin","username","password","reqWeather","cityCode","Promise","resolve","reject","url","err","data","status","weather","lives","error","reqCategorys","parentId","reqAddCategorys","categoryName","reqUpdateCategorys","categoryId","reqProducts","pageNum","pageSize","reqSearchProducts","searchName","searchType","reqCategory","reqUpdateStatus","productId","reqDeleteImg","name","reqAddProduct","product","reaUpdateProduct","reqRoles","reqAddRole","roleName","reqUpdateRole","role","reqUsers","reqDeleteUser","userId","reqAddOrUpdateUser","user","_id"],"mappings":"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","sourcesContent":["/* \r\n要求： 能够根据接口文档定义接口请求\r\n包含应用中所有接口请求函数的模块\r\n  每个函数的返回值都是promise\r\n\r\n  基本要求：能够根据接口文档定义接口请求函数\r\n*/\r\nimport ajax from './ajax'\r\nimport jsonp from 'jsonp'\r\nimport { message } from 'antd'\r\n\r\nconst BASE = ''\r\n\r\n// 登录接口\r\n/* export function reqLogin(username,password) {\r\n  return ajax('/login',{username,password},'POST')\r\n} */\r\nexport const reqLogin = (username,password) => ajax(BASE + '/login',{username,password},'POST')\r\n\r\n// 添加新用户\r\n// export const reqAddUser = (user) => ajax(BASE + '/manage/user/add',user,'POST')\r\n\r\n// jsonp请求的接口请请求函数  获取天气查询的接口\r\nexport const reqWeather = (cityCode) => {\r\n\r\n  return new Promise((resolve,reject)=>{\r\n    const url = `https://restapi.amap.com/v3/weather/weatherInfo?city=${cityCode}&key=36cc4d40112f012a9568e75cd1d8332e`\r\n    // 发送jsonp请求\r\n    jsonp(url,{},(err,data)=>{\r\n      // console.log(err,data);\r\n      // 如果成功了\r\n      if (!err && data.status === '1') {\r\n        const {weather} = data.lives[0]\r\n        // console.log(weather);\r\n        resolve(weather)\r\n      } else {\r\n        // 如果失败了\r\n        message.error('获取天气信息失败...')\r\n      }\r\n    })\r\n  })\r\n  \r\n}\r\n// reqWeather(110101)\r\n\r\n// 获取一级/二级分类的列表\r\nexport const reqCategorys = (parentId) => ajax(BASE + '/manage/category/list',{parentId})\r\n// 添加分类\r\nexport const reqAddCategorys = (categoryName,parentId) => ajax(BASE + '/manage/category/add',{categoryName,parentId},'POST')\r\n\r\n// 更新分类\r\nexport const reqUpdateCategorys = ({categoryId,categoryName}) => ajax(BASE + '/manage/category/update',{categoryName,categoryId},'POST')\r\n\r\n// 获取商品分页列表\r\nexport const reqProducts = (pageNum,pageSize) => ajax(BASE+'/manage/product/list',{pageNum,pageSize})\r\n\r\n// 搜索商品分页列表 (根据商品名称 / 商品描述)\r\n// searchType: 搜索的类型, productName/productDesc\r\nexport const reqSearchProducts = ({pageNum,pageSize,searchName,searchType}) => ajax(BASE+'/manage/product/search',{\r\n  pageNum,pageSize,\r\n  // 将一个变量的值变成属性名 就要加[]\r\n  [searchType]: searchName\r\n})\r\n\r\n// 搜索商品分页列表 (根据商品描述)\r\n// export const reqSearchProducts2 = ({pageNum,pageSize,searchName}) => ajax(BASE+'/manage/product/search',{\r\n//   pageNum,pageSize,productDesc: searchName\r\n// })\r\n\r\n// 获取一个分类\r\nexport const reqCategory = (categoryId) => ajax(BASE + '/manage/category/info',{categoryId})\r\n\r\n// 更新商品的状态(上架或下架)\r\nexport const reqUpdateStatus = (productId,status) => ajax(BASE + '/manage/product/updateStatus',{productId,status},'POST')\r\n\r\n// 删除指定名称图片的接口\r\nexport const reqDeleteImg = (name) => ajax(BASE + '/manage/img/delete',{name},'POST')\r\n\r\n// 添加或者修改商品\r\n// export const reqAddOrUpdateProduct = (product) => ajax(BASE + '/manage/product/' + (product._id ? 'update':'add') ,product,'POST')\r\n// debugger\r\nexport const reqAddProduct = (product) => ajax(BASE + '/manage/product/add',product,'POST')\r\n\r\n// 修改商品\r\nexport const reaUpdateProduct = (product) => ajax(BASE+'/manage/product/update',product,'POST')\r\n\r\n// 获取所有角色的列表\r\nexport const reqRoles = () => ajax(BASE + '/manage/role/list')\r\n\r\n// 添加角色\r\nexport const reqAddRole = (roleName) => ajax(BASE+'/manage/role/add',{roleName},'POST')\r\n\r\n// 更新角色\r\nexport const reqUpdateRole = (role) => ajax(BASE+'/manage/role/update',role,'POST')\r\n\r\n// 获取所有用户的列表\r\nexport const reqUsers = () => ajax(BASE+'/manage/user/list')\r\n\r\n// 删除指定用户\r\nexport const reqDeleteUser = (userId) => ajax(BASE+'/manage/user/delete',{userId},'POST')\r\n\r\n//添加/更新用户\r\nexport const reqAddOrUpdateUser = (user) => ajax(BASE+'/manage/user/'+(user._id?'update':'add'),user,'POST')\r\n\r\n     "]},"metadata":{},"sourceType":"module"}