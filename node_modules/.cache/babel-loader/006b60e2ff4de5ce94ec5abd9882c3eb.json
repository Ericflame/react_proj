{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\n// 可以发送异步ajax请求的函数模块 封装ajax库\n// 函数的返回值是一个promise对象\n\n/* \r\n  1、优化1：统一处理请求异常\r\n      在外层包一个自己创建的promise对象\r\n      在请求出错时 不执行reject(error) 而是显示错误提示\r\n  \r\n  2、优化2：异步得到不是reponse 而是response.data\r\n      在请求成功resolve时：resolve(response.data)\r\n*/\nimport axios from 'axios';\nimport qs from 'querystring';\nimport NProgress from 'nprogress';\nimport { createDeleteUserInfoAction } from '../redux/actions_creators/login_action';\nimport 'nprogress/nprogress.css';\nconst instance = axios.create({\n  timeout: 4000\n}); //请求拦截器\n// Add a request interceptor\n\ninstance.interceptors.request.use(config => {\n  //进度条开始\n  NProgress.start(); // 从配置对象中获取method和data\n\n  const {\n    method,\n    data\n  } = config;\n\n  if (method.toLowerCase() === 'post') {\n    if (data instanceof Object) {\n      config.data = qs.stringify(data);\n    }\n  }\n\n  return config;\n}); //响应拦截器\n// Add a response interceptor\n\ninstance.interceptors.response.use(response => {\n  //进度条结束\n  NProgress.done(); //请求若成功\n\n  return response.data;\n}, //请求若失败\nerror => {\n  NProgress.done();\n\n  if (error.response.status === 401) {\n    _message.error('身份校验失败，请重新登录', 1); // this.props.deleteUserInfo()\n\n\n    store.dispatch;\n  } //请求若失败，提示错误（这里可以处理所有请求的异常）\n\n\n  _message.error(error.message, 1); //中断Promise链\n\n\n  return new Promise(() => {});\n});\nexport default instance;","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/src/api/myAxios.js"],"names":["axios","qs","NProgress","createDeleteUserInfoAction","instance","create","timeout","interceptors","request","use","config","start","method","data","toLowerCase","Object","stringify","response","done","error","status","store","dispatch","message","Promise"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,aAAf;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAAQC,0BAAR,QAAyC,wCAAzC;AACA,OAAO,yBAAP;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAC;AADoB,CAAb,CAAjB,C,CAKA;AACA;;AACAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAY;AAC5C;AACAR,EAAAA,SAAS,CAACS,KAAV,GAF4C,CAG5C;;AACA,QAAM;AAACC,IAAAA,MAAD;AAAQC,IAAAA;AAAR,MAAgBH,MAAtB;;AACA,MAAGE,MAAM,CAACE,WAAP,OAAyB,MAA5B,EAAmC;AACjC,QAAGD,IAAI,YAAYE,MAAnB,EAA0B;AACxBL,MAAAA,MAAM,CAACG,IAAP,GAAcZ,EAAE,CAACe,SAAH,CAAaH,IAAb,CAAd;AACD;AACF;;AACD,SAAOH,MAAP;AAED,CAZD,E,CAcA;AACA;;AACAN,QAAQ,CAACG,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CACGQ,QAAD,IAAc;AACZ;AACAf,EAAAA,SAAS,CAACgB,IAAV,GAFY,CAGZ;;AACF,SAAOD,QAAQ,CAACJ,IAAhB;AACD,CAND,EAQI;AACDM,KAAD,IAAS;AACPjB,EAAAA,SAAS,CAACgB,IAAV;;AACA,MAAGC,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA7B,EAAiC;AAC/B,aAAQD,KAAR,CAAc,cAAd,EAA6B,CAA7B,EAD+B,CAE/B;;;AACAE,IAAAA,KAAK,CAACC,QAAN;AACD,GANM,CAOT;;;AACA,WAAQH,KAAR,CAAcA,KAAK,CAACI,OAApB,EAA4B,CAA5B,EARS,CAST;;;AACA,SAAO,IAAIC,OAAJ,CAAY,MAAI,CAAE,CAAlB,CAAP;AACD,CApBD;AAsBA,eAAepB,QAAf","sourcesContent":["// 可以发送异步ajax请求的函数模块 封装ajax库\r\n// 函数的返回值是一个promise对象\r\n\r\n/* \r\n  1、优化1：统一处理请求异常\r\n      在外层包一个自己创建的promise对象\r\n      在请求出错时 不执行reject(error) 而是显示错误提示\r\n  \r\n  2、优化2：异步得到不是reponse 而是response.data\r\n      在请求成功resolve时：resolve(response.data)\r\n*/\r\n\r\nimport axios from 'axios'\r\nimport qs from 'querystring'\r\nimport {message} from 'antd' \r\nimport NProgress from 'nprogress'\r\nimport {createDeleteUserInfoAction} from '../redux/actions_creators/login_action'\r\nimport 'nprogress/nprogress.css'\r\n\r\nconst instance = axios.create({\r\n  timeout:4000\r\n})\r\n\r\n\r\n//请求拦截器\r\n// Add a request interceptor\r\ninstance.interceptors.request.use((config) => {\r\n  //进度条开始\r\n  NProgress.start()\r\n  // 从配置对象中获取method和data\r\n  const {method,data} = config\r\n  if(method.toLowerCase() === 'post'){\r\n    if(data instanceof Object){\r\n      config.data = qs.stringify(data)\r\n    }\r\n  }\r\n  return config\r\n  \r\n});\r\n\r\n//响应拦截器\r\n// Add a response interceptor\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    //进度条结束\r\n    NProgress.done()\r\n    //请求若成功\r\n  return response.data;\r\n}, \r\n\r\n    //请求若失败\r\n  (error)=>{\r\n    NProgress.done()\r\n    if(error.response.status === 401){\r\n      message.error('身份校验失败，请重新登录',1)\r\n      // this.props.deleteUserInfo()\r\n      store.dispatch\r\n    }\r\n  //请求若失败，提示错误（这里可以处理所有请求的异常）\r\n  message.error(error.message,1)\r\n  //中断Promise链\r\n  return new Promise(()=>{})\r\n});\r\n\r\nexport default instance\r\n\r\n"]},"metadata":{},"sourceType":"module"}