{"ast":null,"code":"import \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\react-project\\\\src\\\\containers\\\\Product\\\\add_update.jsx\",\n    _dec,\n    _class,\n    _temp;\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ArrowLeftOutlined } from '@ant-design/icons';\nimport { reqCategoryList, reqAddProduct } from '../../api';\nimport PicturesWall from './picture_wall';\nimport RichTextEditor from './rich-text-editor'; //数据验证的两种方式:1、form.UseForm 2、formRef = React.createRef();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Item\n} = _Form;\nconst {\n  TextArea\n} = _Input;\nconst {\n  Option\n} = _Select;\nlet AddUpdate = (_dec = connect(state => ({\n  categoryList: state.categoryList,\n  productList: state.productList\n}), {}), _dec(_class = (_temp = class AddUpdate extends Component {\n  constructor(props) {\n    super(props); // 创建用来保存ref标识的标签对象的容器\n\n    this.formRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      categoryList: [],\n      operaType: 'add',\n      options: [],\n      name: '',\n      desc: '',\n      price: '',\n      categoryId: '',\n      detail: '',\n      imgs: '',\n      _id: ''\n    };\n\n    this.getCategoryList = async () => {\n      let result = await reqCategoryList();\n      const {\n        status,\n        data,\n        msg\n      } = result;\n      if (status === 0) this.setState({\n        categoryList: data\n      });else _message.error(msg);\n    };\n\n    this.submit = event => {\n      event.preventDefault(); //从上传组件中获取已经上传的图片数组\n\n      let imgs = this.refs.pictureWall.getImgArr(); // console.log(imgs);\n      //从富文本组件中获取用户输入的文字转换为富文本的字符串\n\n      let detail = this.refs.editor.getRichText(); // console.log(detail);\n      // 进行表单验证 通过才发送请求\n\n      this.formRef.current.validateFields().then(async values => {\n        const {\n          name,\n          desc,\n          price,\n          categoryIds\n        } = values; // 1、收集数据\n\n        let categoryId = categoryIds;\n        let pCategoryId = categoryIds;\n        const product = {\n          name,\n          desc,\n          price,\n          categoryIds,\n          imgs,\n          detail,\n          categoryId,\n          pCategoryId\n        }; // console.log(product);\n\n        let result = await reqAddProduct(product); // console.log(result);\n\n        const {\n          status,\n          data,\n          msg\n        } = result;\n\n        if (status === 0) {\n          _message.success('添加商品成功');\n\n          this.props.history.replace('/Admin/prod_about/Product');\n        } else {\n          _message.error(msg);\n        }\n      }).catch(errorInfo => {\n        console.log(\"哈哈\");\n      });\n    };\n\n    this.validatePrice = value => {\n      // console.log(value);\n      if (value) {\n        if (value * 1 >= 0) {\n          return Promise.resolve();\n        } else {\n          return Promise.resolve();\n          /* reject('价格必须要大于0！') */\n        }\n      } else {\n        return Promise.resolve();\n      }\n    };\n\n    this.pw = /*#__PURE__*/React.createRef();\n    this.editor = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      categoryList,\n      productList\n    } = this.props;\n    const {\n      id\n    } = this.props.match.params; // console.log(id);\n\n    if (categoryList.length) this.setState({\n      categoryList\n    });else this.getCategoryList();\n\n    if (id) {\n      this.setState({\n        operaType: 'update'\n      });\n\n      if (productList.length) {\n        let result = productList.find(item => {\n          console.log(item);\n          return item._id === id;\n        });\n\n        if (result) {\n          this.setState({ ...result\n          });\n        }\n      }\n    }\n  }\n\n  //   // 用于加载下一级列表的回调函数\n  //   loadData = async selectedOptions => {\n  //     // 得到点击的列表项 即option对象\n  //     const targetOption = selectedOptions[0]\n  //     // 显示loading效果\n  //     targetOption.loading = true\n  //     // 根据选中的分类 请求获取二级分类列表\n  //     const subCategorys = await this.getCategorys(targetOption.value)\n  //     // 隐藏loading\n  //     targetOption.loading = false\n  //     if (subCategorys && subCategorys.length > 0) {\n  //       // 说明现在存在二级分类\n  //       // 生成一个二级列表的options单\n  //       const cOptions = subCategorys.map(c=>({\n  //         value: c._id,\n  //         label: c.name,\n  //         isLeaf: true,  \n  //       }))\n  //       // 关联到当前的target.option身上 ===> children\n  //       targetOption.children = cOptions\n  //     } else {\n  //       // 当前选中的列表项没有二级分类\n  //       targetOption.isLeaf = true \n  //     }\n  //       // 更新options状态\n  //       this.setState({\n  //         options: [...this.state.options],\n  //       })\n  //   }\n  //   submit =  () => {\n  //     // 进行表单验证 通过才发送请求\n  //     this.formRef.current.validateFields()\n  //     .then( async values => {\n  //       // 1、收集数据\n  //       // console.log('values',values);\n  //       const {name,desc,price,categoryIds} = values\n  //       let pCategoryId,categoryId\n  //       if (categoryIds.length === 1) {\n  //         pCategoryId = '0'\n  //         categoryId = categoryIds[0]\n  //       } else {\n  //         pCategoryId = categoryIds[0]\n  //         categoryId = categoryIds[1]\n  //       }\n  //       const imgs= this.pw.current.getImgs()\n  //       const detail = this.editor.current.getDetail()\n  //       // 封装成product对象\n  //       const product = {name,desc,price,imgs,detail}\n  //       console.log('product',product);\n  //       /* // 如果是更新需要添加_id\n  //       if (this.isUpdate) {\n  //         product._id = this.product._id\n  //       }\n  //       // 2、调用接口请求函数去添加/更新\n  //       const result = await reqAddOrUpdateProduct(product)\n  //       console.log(result);\n  //       // 3、根据结果显示\n  //       if (result.status === 0) {\n  //         message.success(`${this.isUpdate ? '更新':'添加'}商品成功！`)\n  //         this.props.history.goBack()\n  //       } else {\n  //         message.error(`${this.isUpdate ? '更新':'添加'}商品失败！`)\n  //       } */\n  //       let result\n  //       // 如果是更新需要添加_id\n  //       if (this.isUpdate) {\n  //         product._id = this.product._id\n  //         result = await reaUpdateProduct(product)\n  //         if (result.status === 0) {\n  //           message.success(` 更新商品成功！`)\n  //           this.props.history.goBack()\n  //         } else {\n  //           message.error(`更新商品失败！`)\n  //         }\n  //       } else {\n  //         result = await reqAddProduct(product)\n  //         // console.log('添加',result);   result.status===1\n  //         if (result.status === 0) {\n  //           message.success(` 添加商品成功！`)\n  //           this.props.history.goBack()\n  //         } else {\n  //           message.error(`添加商品失败！`)\n  //         }\n  //       }\n  //       // alert('提交请求成功')\n  //       // console.log('submitvalue',values);\n  //       // console.log('submit', this.pw.current.getImgs());\n  //       // const imgs= this.pw.current.getImgs()\n  //       // const detail = this.editor.current.getDetail()\n  //       // console.log('submit',imgs,detail);\n  //     })\n  //     .catch(errInfo => {\n  //       console.log('请求提交错误', errInfo);\n  //     })\n  //   }\n  //   componentDidMount() {\n  //     this.getCategorys('0')  //获取一级列表\n  //   }\n  //   UNSAFE_componentWillMount(){\n  //     // 如果是添加则会没值 否则有值\n  //     const product = this.props.location.state\n  //     // 保存是否为更新的标识  \n  //     this.isUpdate = !!product  //强制转换为一个布尔值\n  //     // 保存商品 若没有 保存一个空对象 则下面设置初始值则不会报错\n  //     this.product = product || {}\n  //   }\n  render() {\n    const {\n      operaType\n    } = this.state; // 指定Item配置对象\n\n    const layout = {\n      labelCol: {\n        span: 2 //指定左侧label的宽度\n\n      },\n      wrapperCol: {\n        span: 8 //指定右侧包裹的宽度\n\n      }\n    };\n    /* \r\n          const {isUpdate,product} = this\r\n          const {pCategoryId,categoryId,imgs,detail} = product\r\n          // 用来接收级联分类ID的数组\r\n          const categorys = []\r\n          if (isUpdate) {\r\n            // 商品处于一级分类列表中\r\n            if (pCategoryId === '0') {\r\n              categorys.push(categoryId)\r\n            } else {\r\n              // 商品为二级分类\r\n              categorys.push(pCategoryId)\r\n              categorys.push(categoryId)\r\n            }\r\n          } */\n\n    const title = /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(_Button, {\n        type: \"link\",\n        onClick: () => this.props.history.goBack(),\n        children: /*#__PURE__*/_jsxDEV(ArrowLeftOutlined, {\n          style: {\n            marginRight: 10,\n            fontSize: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: operaType ? '修改商品' : '添加商品'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(_Card, {\n      title: title,\n      children: /*#__PURE__*/_jsxDEV(_Form, {\n        ref: this.formRef,\n        ...layout,\n        children: [/*#__PURE__*/_jsxDEV(Item, {\n          name: \"name\",\n          initialValue: \"\",\n          rules: [{\n            required: true,\n            message: '必须输入商品名称'\n          }],\n          label: \"\\u5546\\u54C1\\u540D\\u79F0\",\n          children: /*#__PURE__*/_jsxDEV(_Input, {\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u540D\\u79F0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          name: \"desc\",\n          rules: [{\n            required: true,\n            message: '必须输入商品描述'\n          }],\n          label: \"\\u5546\\u54C1\\u63CF\\u8FF0\",\n          children: /*#__PURE__*/_jsxDEV(TextArea, {\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u63CF\\u8FF0\",\n            autoSize: {\n              minRows: 2,\n              maxRows: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          name: \"price\",\n          rules: [{\n            required: true,\n            message: '必须输入商品价格'\n          }, {\n            validator: this.validatePrice\n          }],\n          label: \"\\u5546\\u54C1\\u4EF7\\u683C\",\n          children: /*#__PURE__*/_jsxDEV(_Input, {\n            type: \"number\",\n            prefix: \"\\uFFE5\",\n            addonAfter: \"\\u5143\",\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u4EF7\\u683C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          name: \"categoryIds\",\n          initialValue: \"\",\n          rules: [{\n            required: true,\n            message: '必须指定商品的分类'\n          }],\n          label: \"\\u5546\\u54C1\\u5206\\u7C7B\",\n          children: /*#__PURE__*/_jsxDEV(_Select, {\n            children: [/*#__PURE__*/_jsxDEV(Option, {\n              value: \"\",\n              children: \"\\u8BF7\\u9009\\u62E9\\u5206\\u7C7B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 29\n            }, this), this.state.categoryList.map(item => {\n              return /*#__PURE__*/_jsxDEV(Option, {\n                value: item._id,\n                children: item.name\n              }, item._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 44\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u56FE\\u7247\",\n          wrapperCol: {\n            md: 12\n          },\n          children: /*#__PURE__*/_jsxDEV(PicturesWall, {\n            ref: \"pictureWall\"\n            /*  imgs={imgs}  */\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u8BE6\\u60C5\",\n          labelCol: {\n            span: 2\n          },\n          wrapperCol: {\n            span: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(RichTextEditor, {\n            ref: \"editor\"\n            /* detail={detail} */\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          children: /*#__PURE__*/_jsxDEV(_Button, {\n            onClick: this.submit,\n            type: \"primary\",\n            children: \"\\u63D0\\u4EA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this);\n  }\n\n}, _temp)) || _class);\nexport default AddUpdate;","map":{"version":3,"sources":["C:/Users/PC/Desktop/react-project/src/containers/Product/add_update.jsx"],"names":["React","Component","connect","ArrowLeftOutlined","reqCategoryList","reqAddProduct","PicturesWall","RichTextEditor","Item","TextArea","Option","AddUpdate","state","categoryList","productList","constructor","props","formRef","createRef","operaType","options","name","desc","price","categoryId","detail","imgs","_id","getCategoryList","result","status","data","msg","setState","error","submit","event","preventDefault","refs","pictureWall","getImgArr","editor","getRichText","current","validateFields","then","values","categoryIds","pCategoryId","product","success","history","replace","catch","errorInfo","console","log","validatePrice","value","Promise","resolve","pw","componentDidMount","id","match","params","length","find","item","render","layout","labelCol","span","wrapperCol","title","goBack","marginRight","fontSize","required","message","minRows","maxRows","validator","map","md"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Form, Input, Card, message, /* Cascader, */ Select } from \"antd\"\r\nimport { connect } from 'react-redux'\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport { reqCategoryList,reqAddProduct } from '../../api'\r\nimport PicturesWall from './picture_wall'\r\nimport RichTextEditor from './rich-text-editor'\r\n\r\n\r\n//数据验证的两种方式:1、form.UseForm 2、formRef = React.createRef();\r\nconst { Item } = Form\r\nconst { TextArea } = Input\r\nconst { Option } = Select\r\n\r\n@connect(\r\n    state => ({\r\n        categoryList: state.categoryList,\r\n        productList:state.productList\r\n    }),\r\n    {}\r\n)\r\nclass AddUpdate extends Component {\r\n    formRef = React.createRef();\r\n\r\n    state = {\r\n        categoryList: [],\r\n        operaType:'add',\r\n        options: [],\r\n        name:'',\r\n        desc:'',\r\n        price:'',\r\n        categoryId:'',\r\n        detail:'',\r\n        imgs:'',\r\n        _id:''\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        // 创建用来保存ref标识的标签对象的容器\r\n        this.pw = React.createRef()\r\n        this.editor = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { categoryList,productList } = this.props\r\n        const {id} = this.props.match.params \r\n        // console.log(id);\r\n        if (categoryList.length) this.setState({ categoryList })\r\n        else this.getCategoryList()\r\n        if (id) {\r\n            this.setState({operaType:'update'})\r\n            if(productList.length){\r\n                let result = productList.find((item)=>{\r\n                    console.log(item);\r\n                    return item._id === id\r\n                })\r\n                if(result){\r\n                    this.setState({...result})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getCategoryList = async () => {\r\n        let result = await reqCategoryList()\r\n        const { status, data, msg } = result\r\n        if (status === 0) this.setState({ categoryList: data })\r\n        else message.error(msg)\r\n    }\r\n\r\n    submit = (event) => {\r\n        event.preventDefault()\r\n        //从上传组件中获取已经上传的图片数组\r\n        let imgs = this.refs.pictureWall.getImgArr(); \r\n        // console.log(imgs);\r\n        //从富文本组件中获取用户输入的文字转换为富文本的字符串\r\n        let detail= this.refs.editor.getRichText()\r\n        // console.log(detail);\r\n        // 进行表单验证 通过才发送请求\r\n        this.formRef.current.validateFields()\r\n            .then(async values => {\r\n                const {name,desc,price,categoryIds} = values\r\n                // 1、收集数据\r\n                let categoryId = categoryIds\r\n                let pCategoryId = categoryIds\r\n                const product =  {name,desc,price,categoryIds,imgs,detail,categoryId,pCategoryId}\r\n                // console.log(product);\r\n                let result = await reqAddProduct(product)\r\n                // console.log(result);\r\n                const {status,data,msg} = result\r\n                if(status === 0){\r\n                    message.success('添加商品成功')\r\n                    this.props.history.replace('/Admin/prod_about/Product')\r\n                }else{\r\n                    message.error(msg)\r\n                }\r\n            })\r\n            .catch(errorInfo=>{console.log(\"哈哈\");})\r\n    }\r\n\r\n    //   // 更新options数组\r\n    //   initOptions = async (categorys) => {\r\n    //     // 根据categorys 生成options数组\r\n    //     const options = categorys.map(c => ({\r\n    //       value: c._id,\r\n    //       label: c.name,\r\n    //       isLeaf: false,  //不是叶子 即还有其他子集分类\r\n    //     }))\r\n\r\n    //     // 如果是一个二级分类商品的更新\r\n    //     const {isUpdate,product} = this\r\n    //     const {pCategoryId} = product\r\n    //     if (isUpdate && pCategoryId !== '0') {\r\n    //       // 获取相应的二级分类列表\r\n    //       const subCategorys = await this.getCategorys(pCategoryId)\r\n    //       // 生成二级下拉列表的options\r\n    //       const childOptions = subCategorys.map(c=>({\r\n    //         value: c._id,\r\n    //         label: c.name,\r\n    //         isLeaf: true,\r\n    //       }))\r\n    //       // 找到当前商品相应的一级option对象\r\n    //       const targetOption = options.find(option => option.value === pCategoryId)\r\n    //       // 关联到对应的一级option上\r\n    //       targetOption.children = childOptions\r\n    //     }\r\n\r\n    //     // 更新options状态\r\n    //     this.setState({options})\r\n    //   }\r\n\r\n\r\n    //   // 用于异步获取一级/二级分类列表 并且显示\r\n    //   // async函数的返回值就是一个新的promise对象 promise的结果和值由async的结果决定\r\n\r\n    //   getCategorys = async (parentId) => {\r\n    //     const result = await reqCategorys(parentId)\r\n    //     if (result.status === 0) {\r\n    //       const categorys = result.data\r\n    //       // 判断 一级列表还是二级列表\r\n    //       if (parentId === '0') {\r\n    //         this.initOptions(categorys)\r\n    //       } else {\r\n    //         // 二级列表\r\n    //         // 返回二级列表 ===> 当前async函数返回的promise就会成功且value为categorys\r\n    //         return categorys\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    // 定义验证价格的函数\r\n    validatePrice = (value) => {\r\n        // console.log(value);\r\n        if (value) {\r\n            if (value * 1 >= 0) {\r\n                return Promise.resolve()\r\n            } else {\r\n                return Promise.resolve()/* reject('价格必须要大于0！') */\r\n            }\r\n        } else {\r\n            return Promise.resolve()\r\n        }\r\n    }\r\n\r\n    //   // 用于加载下一级列表的回调函数\r\n    //   loadData = async selectedOptions => {\r\n    //     // 得到点击的列表项 即option对象\r\n    //     const targetOption = selectedOptions[0]\r\n    //     // 显示loading效果\r\n    //     targetOption.loading = true\r\n\r\n    //     // 根据选中的分类 请求获取二级分类列表\r\n    //     const subCategorys = await this.getCategorys(targetOption.value)\r\n    //     // 隐藏loading\r\n    //     targetOption.loading = false\r\n\r\n    //     if (subCategorys && subCategorys.length > 0) {\r\n    //       // 说明现在存在二级分类\r\n    //       // 生成一个二级列表的options单\r\n    //       const cOptions = subCategorys.map(c=>({\r\n    //         value: c._id,\r\n    //         label: c.name,\r\n    //         isLeaf: true,  \r\n    //       }))\r\n    //       // 关联到当前的target.option身上 ===> children\r\n    //       targetOption.children = cOptions\r\n    //     } else {\r\n    //       // 当前选中的列表项没有二级分类\r\n    //       targetOption.isLeaf = true \r\n    //     }\r\n\r\n    //       // 更新options状态\r\n    //       this.setState({\r\n    //         options: [...this.state.options],\r\n    //       })\r\n    //   }\r\n\r\n    //   submit =  () => {\r\n    //     // 进行表单验证 通过才发送请求\r\n    //     this.formRef.current.validateFields()\r\n    //     .then( async values => {\r\n\r\n    //       // 1、收集数据\r\n    //       // console.log('values',values);\r\n    //       const {name,desc,price,categoryIds} = values\r\n    //       let pCategoryId,categoryId\r\n    //       if (categoryIds.length === 1) {\r\n    //         pCategoryId = '0'\r\n    //         categoryId = categoryIds[0]\r\n    //       } else {\r\n    //         pCategoryId = categoryIds[0]\r\n    //         categoryId = categoryIds[1]\r\n    //       }\r\n    //       const imgs= this.pw.current.getImgs()\r\n    //       const detail = this.editor.current.getDetail()\r\n\r\n    //       // 封装成product对象\r\n    //       const product = {name,desc,price,imgs,detail}\r\n    //       console.log('product',product);\r\n\r\n    //       /* // 如果是更新需要添加_id\r\n    //       if (this.isUpdate) {\r\n    //         product._id = this.product._id\r\n    //       }\r\n\r\n    //       // 2、调用接口请求函数去添加/更新\r\n    //       const result = await reqAddOrUpdateProduct(product)\r\n    //       console.log(result);\r\n    //       // 3、根据结果显示\r\n    //       if (result.status === 0) {\r\n    //         message.success(`${this.isUpdate ? '更新':'添加'}商品成功！`)\r\n    //         this.props.history.goBack()\r\n    //       } else {\r\n    //         message.error(`${this.isUpdate ? '更新':'添加'}商品失败！`)\r\n    //       } */\r\n\r\n    //       let result\r\n    //       // 如果是更新需要添加_id\r\n    //       if (this.isUpdate) {\r\n    //         product._id = this.product._id\r\n    //         result = await reaUpdateProduct(product)\r\n    //         if (result.status === 0) {\r\n    //           message.success(` 更新商品成功！`)\r\n    //           this.props.history.goBack()\r\n    //         } else {\r\n    //           message.error(`更新商品失败！`)\r\n    //         }\r\n    //       } else {\r\n    //         result = await reqAddProduct(product)\r\n    //         // console.log('添加',result);   result.status===1\r\n    //         if (result.status === 0) {\r\n    //           message.success(` 添加商品成功！`)\r\n    //           this.props.history.goBack()\r\n    //         } else {\r\n    //           message.error(`添加商品失败！`)\r\n    //         }\r\n    //       }\r\n\r\n\r\n\r\n\r\n    //       // alert('提交请求成功')\r\n    //       // console.log('submitvalue',values);\r\n    //       // console.log('submit', this.pw.current.getImgs());\r\n    //       // const imgs= this.pw.current.getImgs()\r\n    //       // const detail = this.editor.current.getDetail()\r\n    //       // console.log('submit',imgs,detail);\r\n    //     })\r\n    //     .catch(errInfo => {\r\n    //       console.log('请求提交错误', errInfo);\r\n    //     })\r\n    //   }\r\n\r\n    //   componentDidMount() {\r\n    //     this.getCategorys('0')  //获取一级列表\r\n    //   }\r\n\r\n    //   UNSAFE_componentWillMount(){\r\n    //     // 如果是添加则会没值 否则有值\r\n    //     const product = this.props.location.state\r\n    //     // 保存是否为更新的标识  \r\n    //     this.isUpdate = !!product  //强制转换为一个布尔值\r\n    //     // 保存商品 若没有 保存一个空对象 则下面设置初始值则不会报错\r\n    //     this.product = product || {}\r\n    //   }\r\n    render() {\r\n        const {operaType} = this.state\r\n        // 指定Item配置对象\r\n        const layout = {\r\n            labelCol: {\r\n                span: 2,   //指定左侧label的宽度\r\n            },\r\n            wrapperCol: {\r\n                span: 8,  //指定右侧包裹的宽度\r\n            },\r\n        }\r\n        /* \r\n              const {isUpdate,product} = this\r\n              const {pCategoryId,categoryId,imgs,detail} = product\r\n              // 用来接收级联分类ID的数组\r\n              const categorys = []\r\n              if (isUpdate) {\r\n                // 商品处于一级分类列表中\r\n                if (pCategoryId === '0') {\r\n                  categorys.push(categoryId)\r\n                } else {\r\n                  // 商品为二级分类\r\n                  categorys.push(pCategoryId)\r\n                  categorys.push(categoryId)\r\n                }\r\n              } */\r\n\r\n        const title = (\r\n            <span>\r\n                <Button type=\"link\" onClick={() => this.props.history.goBack()}>\r\n                    <ArrowLeftOutlined style={{ marginRight: 10, fontSize: 20 }} />\r\n                </Button>\r\n                <span>{operaType ? '修改商品' : '添加商品'}</span>\r\n            </span>\r\n        )\r\n\r\n        return (\r\n            <Card title={title}>\r\n                <Form ref={this.formRef} {...layout}>\r\n                    <Item name='name'\r\n                    initialValue=\"\"\r\n                        rules={[\r\n                            { required: true, message: '必须输入商品名称' },\r\n                        ]}\r\n                        label='商品名称'>\r\n                        <Input placeholder='请输入商品名称' />\r\n                    </Item>\r\n                    <Item name='desc'\r\n                        rules={[\r\n                            { required: true, message: '必须输入商品描述' },\r\n                        ]} label='商品描述'>\r\n                        <TextArea placeholder='请输入商品描述' autoSize={{ minRows: 2, maxRows: 5 }} />\r\n                    </Item>\r\n                    <Item name='price'\r\n                        rules={[\r\n                            { required: true, message: '必须输入商品价格' },\r\n                            { validator: this.validatePrice }\r\n                        ]} label='商品价格'>\r\n                        <Input type='number' prefix=\"￥\" addonAfter='元' placeholder='请输入商品价格' />\r\n                    </Item>\r\n                    <Item name='categoryIds' initialValue=\"\" rules={[{ required: true, message: '必须指定商品的分类' },]} label='商品分类'>\r\n                        <Select>\r\n                            <Option value=\"\">请选择分类</Option>\r\n                            {\r\n                                this.state.categoryList.map((item) => {\r\n                                    return <Option key={item._id} value={item._id}>{item.name}</Option>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                        {/* <Cascader\r\n                                        placeholder='请指定商品的分类'\r\n                                    // options={this.state.options}  //需要显示的列表数据数组\r\n                                    // loadData={this.loadData}   //当选择某个列表项 加载下一级列表的回调\r\n                                    /> */}\r\n                    </Item>\r\n                    <Item \r\n                    label='商品图片'\r\n                    wrapperCol={{md:12}}\r\n                    >\r\n                        <PicturesWall ref=\"pictureWall\"  /*  imgs={imgs}  *//>\r\n                    </Item>\r\n                    <Item label='商品详情' labelCol={{ span: 2 }} wrapperCol={{ span: 20 }}>\r\n                        <RichTextEditor ref=\"editor\" /* detail={detail} */ />\r\n                    </Item>\r\n                    <Item>\r\n                        <Button onClick={this.submit} type='primary'>提交</Button>\r\n                    </Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\nexport default AddUpdate"]},"metadata":{},"sourceType":"module"}